/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package br.edu.vianna.sistemaclube.view.visualizacao.avaliacoes;

import br.edu.vianna.sistemaclube.dao.impl.AtividadeDAO;
import br.edu.vianna.sistemaclube.dao.impl.AvaliacaoDAO;
import br.edu.vianna.sistemaclube.dao.impl.InscricaoAtividadeDAO;
import br.edu.vianna.sistemaclube.dao.impl.usuariodao.InstrutorDAO;
import br.edu.vianna.sistemaclube.dao.impl.usuariodao.MembroDAO;
import br.edu.vianna.sistemaclube.model.Clube;
import br.edu.vianna.sistemaclube.model.atividades.Atividade;
import br.edu.vianna.sistemaclube.model.atividades.ETipoAtividades;
import br.edu.vianna.sistemaclube.model.avaliacoes.Avaliacao;
import br.edu.vianna.sistemaclube.model.inscricoes.InscricaoAtividade;
import br.edu.vianna.sistemaclube.model.usuarios.Instrutor;
import br.edu.vianna.sistemaclube.model.usuarios.Membro;
import br.edu.vianna.sistemaclube.model.usuarios.Usuario;
import br.edu.vianna.sistemaclube.utils.datahora.FormataData;
import br.edu.vianna.sistemaclube.utils.datahora.VerificaDataHora;
import br.edu.vianna.sistemaclube.utils.login.Sessao;
import br.edu.vianna.sistemaclube.view.cadastros.atividades.ViewCadastroAtividades;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * @author William
 */
public class ViewAvaliacaoAtividades extends javax.swing.JDialog {

    /**
     * Creates new form ViewDetalhesAtividades
     */
    public ViewAvaliacaoAtividades(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ViewAvaliacaoAtividades(ViewCadastroAtividades viewCadastroAtividades, boolean modal) {
        super(viewCadastroAtividades, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupRegistrarPresenca = new javax.swing.ButtonGroup();
        pnlTopo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlControles = new javax.swing.JPanel();
        btnFechar = new javax.swing.JButton();
        btnAvaliar = new javax.swing.JButton();
        tabPnlBuscar = new javax.swing.JTabbedPane();
        pnlBuscarPorId = new javax.swing.JPanel();
        txtBuscarPorId = new javax.swing.JTextField();
        btnBuscarPorId = new javax.swing.JButton();
        pnlBuscarPorNomeAtividade = new javax.swing.JPanel();
        txtBuscarPorNome = new javax.swing.JTextField();
        btnBuscarPorNome = new javax.swing.JButton();
        pnlBuscarPorTipo = new javax.swing.JPanel();
        btnBuscarPorTipo = new javax.swing.JButton();
        cboSelecionarTipo = new javax.swing.JComboBox<>();
        pnlBuscarPorData = new javax.swing.JPanel();
        btnBuscarPorData = new javax.swing.JButton();
        txtBuscarPorData = new javax.swing.JFormattedTextField();
        pnlBuscarPeloNomeDoMembro = new javax.swing.JPanel();
        txtBuscarPorNomeDoMembro = new javax.swing.JTextField();
        btnBuscarPorNomeDoMembro = new javax.swing.JButton();
        pnlTabela = new javax.swing.JScrollPane();
        tbAvaliacaoAtv = new javax.swing.JTable();
        tabPnlAtividadesDoUsuario = new javax.swing.JTabbedPane();
        pnlResumoAtividadeSelecionada = new javax.swing.JPanel();
        lblNomeMembro = new javax.swing.JLabel();
        txtNomeMembro = new javax.swing.JTextField();
        txtDataAtividade = new javax.swing.JFormattedTextField();
        lblDataAtividade = new javax.swing.JLabel();
        lblIdMembro = new javax.swing.JLabel();
        txtIdInscricao = new javax.swing.JTextField();
        lblIdInscricao = new javax.swing.JLabel();
        pnlAvaliacao = new javax.swing.JPanel();
        txtComentario = new javax.swing.JScrollPane();
        txtComentarioAvaliador = new javax.swing.JTextArea();
        lblComentarioAvaliador = new javax.swing.JLabel();
        lblAtribuirNota = new javax.swing.JLabel();
        lblPresencaAtividade = new javax.swing.JLabel();
        rbPresente = new javax.swing.JRadioButton();
        rbAusente = new javax.swing.JRadioButton();
        txtAtribuirNota = new javax.swing.JTextField();
        txtIdAtividade = new javax.swing.JTextField();
        lblIdAtividade = new javax.swing.JLabel();
        txtIdMembro = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Avaliação de desempenho");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlTopo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Avaliar o desempenho dos membros nas atividades");

        javax.swing.GroupLayout pnlTopoLayout = new javax.swing.GroupLayout(pnlTopo);
        pnlTopo.setLayout(pnlTopoLayout);
        pnlTopoLayout.setHorizontalGroup(
            pnlTopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTopoLayout.setVerticalGroup(
            pnlTopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTopoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pnlControles.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlControles.setPreferredSize(new java.awt.Dimension(892, 50));

        btnFechar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Cancel.png"))); // NOI18N
        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        btnAvaliar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAvaliar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Apply.png"))); // NOI18N
        btnAvaliar.setText("Registrar avaliação");
        btnAvaliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvaliarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlesLayout = new javax.swing.GroupLayout(pnlControles);
        pnlControles.setLayout(pnlControlesLayout);
        pnlControlesLayout.setHorizontalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAvaliar, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFechar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlControlesLayout.setVerticalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAvaliar, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(btnFechar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabPnlBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Buscar inscrição em atividade", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        tabPnlBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txtBuscarPorId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtBuscarPorId.setForeground(new java.awt.Color(255, 255, 255));
        txtBuscarPorId.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnBuscarPorId.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorId.setText("Buscar");
        btnBuscarPorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBuscarPorIdLayout = new javax.swing.GroupLayout(pnlBuscarPorId);
        pnlBuscarPorId.setLayout(pnlBuscarPorIdLayout);
        pnlBuscarPorIdLayout.setHorizontalGroup(
            pnlBuscarPorIdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarPorIdLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(txtBuscarPorId, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorId, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarPorIdLayout.setVerticalGroup(
            pnlBuscarPorIdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarPorIdLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnlBuscarPorIdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarPorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPorId))
                .addContainerGap())
        );

        tabPnlBuscar.addTab("Por ID", pnlBuscarPorId);

        txtBuscarPorNome.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtBuscarPorNome.setForeground(new java.awt.Color(255, 255, 255));
        txtBuscarPorNome.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnBuscarPorNome.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorNome.setText("Buscar");
        btnBuscarPorNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorNomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBuscarPorNomeAtividadeLayout = new javax.swing.GroupLayout(pnlBuscarPorNomeAtividade);
        pnlBuscarPorNomeAtividade.setLayout(pnlBuscarPorNomeAtividadeLayout);
        pnlBuscarPorNomeAtividadeLayout.setHorizontalGroup(
            pnlBuscarPorNomeAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarPorNomeAtividadeLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(txtBuscarPorNome, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorNome, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarPorNomeAtividadeLayout.setVerticalGroup(
            pnlBuscarPorNomeAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarPorNomeAtividadeLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnlBuscarPorNomeAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarPorNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPorNome))
                .addContainerGap())
        );

        tabPnlBuscar.addTab("Pelo nome da Atividade", pnlBuscarPorNomeAtividade);

        btnBuscarPorTipo.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorTipo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorTipo.setText("Buscar");
        btnBuscarPorTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorTipoActionPerformed(evt);
            }
        });

        cboSelecionarTipo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cboSelecionarTipo.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlBuscarPorTipoLayout = new javax.swing.GroupLayout(pnlBuscarPorTipo);
        pnlBuscarPorTipo.setLayout(pnlBuscarPorTipoLayout);
        pnlBuscarPorTipoLayout.setHorizontalGroup(
            pnlBuscarPorTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarPorTipoLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(cboSelecionarTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarPorTipoLayout.setVerticalGroup(
            pnlBuscarPorTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarPorTipoLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnlBuscarPorTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarPorTipo)
                    .addComponent(cboSelecionarTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabPnlBuscar.addTab("Pelo tipo de Atividade", pnlBuscarPorTipo);

        btnBuscarPorData.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorData.setText("Buscar");
        btnBuscarPorData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorDataActionPerformed(evt);
            }
        });

        txtBuscarPorData.setForeground(new java.awt.Color(255, 255, 255));
        try {
            txtBuscarPorData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBuscarPorData.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBuscarPorData.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        javax.swing.GroupLayout pnlBuscarPorDataLayout = new javax.swing.GroupLayout(pnlBuscarPorData);
        pnlBuscarPorData.setLayout(pnlBuscarPorDataLayout);
        pnlBuscarPorDataLayout.setHorizontalGroup(
            pnlBuscarPorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarPorDataLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(txtBuscarPorData, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorData, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarPorDataLayout.setVerticalGroup(
            pnlBuscarPorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarPorDataLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnlBuscarPorDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarPorData)
                    .addComponent(txtBuscarPorData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabPnlBuscar.addTab("Por Data", pnlBuscarPorData);

        txtBuscarPorNomeDoMembro.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtBuscarPorNomeDoMembro.setForeground(new java.awt.Color(255, 255, 255));
        txtBuscarPorNomeDoMembro.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnBuscarPorNomeDoMembro.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorNomeDoMembro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorNomeDoMembro.setText("Buscar");
        btnBuscarPorNomeDoMembro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorNomeDoMembroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBuscarPeloNomeDoMembroLayout = new javax.swing.GroupLayout(pnlBuscarPeloNomeDoMembro);
        pnlBuscarPeloNomeDoMembro.setLayout(pnlBuscarPeloNomeDoMembroLayout);
        pnlBuscarPeloNomeDoMembroLayout.setHorizontalGroup(
            pnlBuscarPeloNomeDoMembroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarPeloNomeDoMembroLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(txtBuscarPorNomeDoMembro, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorNomeDoMembro, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarPeloNomeDoMembroLayout.setVerticalGroup(
            pnlBuscarPeloNomeDoMembroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarPeloNomeDoMembroLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnlBuscarPeloNomeDoMembroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarPorNomeDoMembro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPorNomeDoMembro))
                .addContainerGap())
        );

        tabPnlBuscar.addTab("Pelo Nome do Membro", pnlBuscarPeloNomeDoMembro);

        tbAvaliacaoAtv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "ID Membro", "Membro", "ID Atividade", "Nome da atividade", "Tipo da atividade", "Data de realização", "Horário"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAvaliacaoAtv.setShowGrid(true);
        tbAvaliacaoAtv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbAvaliacaoAtvMouseClicked(evt);
            }
        });
        pnlTabela.setViewportView(tbAvaliacaoAtv);
        if (tbAvaliacaoAtv.getColumnModel().getColumnCount() > 0) {
            tbAvaliacaoAtv.getColumnModel().getColumn(0).setMinWidth(65);
            tbAvaliacaoAtv.getColumnModel().getColumn(0).setPreferredWidth(65);
            tbAvaliacaoAtv.getColumnModel().getColumn(0).setMaxWidth(60);
            tbAvaliacaoAtv.getColumnModel().getColumn(1).setMaxWidth(95);
            tbAvaliacaoAtv.getColumnModel().getColumn(2).setMinWidth(200);
            tbAvaliacaoAtv.getColumnModel().getColumn(3).setMaxWidth(95);
            tbAvaliacaoAtv.getColumnModel().getColumn(4).setMinWidth(200);
        }

        tabPnlAtividadesDoUsuario.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblNomeMembro.setText("Nome do membro");

        txtNomeMembro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtNomeMembro.setForeground(new java.awt.Color(255, 255, 255));
        txtNomeMembro.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNomeMembro.setEnabled(false);

        txtDataAtividade.setForeground(new java.awt.Color(255, 255, 255));
        try {
            txtDataAtividade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataAtividade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDataAtividade.setEnabled(false);
        txtDataAtividade.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        lblDataAtividade.setText("Data da atividade");

        lblIdMembro.setText("ID Membro");

        txtIdInscricao.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtIdInscricao.setForeground(new java.awt.Color(255, 255, 255));
        txtIdInscricao.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdInscricao.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtIdInscricao.setEnabled(false);

        lblIdInscricao.setText("Nº da inscrição");

        pnlAvaliacao.setBorder(javax.swing.BorderFactory.createTitledBorder("Avaliação"));

        txtComentarioAvaliador.setColumns(20);
        txtComentarioAvaliador.setRows(5);
        txtComentarioAvaliador.setWrapStyleWord(true);
        txtComentario.setViewportView(txtComentarioAvaliador);

        lblComentarioAvaliador.setText("Comentário do avaliador");

        lblAtribuirNota.setText("Atribuir nota");

        lblPresencaAtividade.setText("Presença na atividade");

        btnGroupRegistrarPresenca.add(rbPresente);
        rbPresente.setSelected(true);
        rbPresente.setText("Presente");
        rbPresente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbPresenteItemStateChanged(evt);
            }
        });

        btnGroupRegistrarPresenca.add(rbAusente);
        rbAusente.setText("Ausente");
        rbAusente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbAusenteItemStateChanged(evt);
            }
        });

        txtAtribuirNota.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtAtribuirNota.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAtribuirNota.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtAtribuirNotaInputMethodTextChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlAvaliacaoLayout = new javax.swing.GroupLayout(pnlAvaliacao);
        pnlAvaliacao.setLayout(pnlAvaliacaoLayout);
        pnlAvaliacaoLayout.setHorizontalGroup(
            pnlAvaliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAvaliacaoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlAvaliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPresencaAtividade)
                    .addComponent(rbAusente)
                    .addComponent(rbPresente))
                .addGap(40, 40, 40)
                .addGroup(pnlAvaliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtAtribuirNota)
                    .addComponent(lblAtribuirNota, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(pnlAvaliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblComentarioAvaliador)
                    .addComponent(txtComentario, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlAvaliacaoLayout.setVerticalGroup(
            pnlAvaliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAvaliacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblComentarioAvaliador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAvaliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAvaliacaoLayout.createSequentialGroup()
                        .addGroup(pnlAvaliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPresencaAtividade)
                            .addComponent(lblAtribuirNota))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAvaliacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAvaliacaoLayout.createSequentialGroup()
                                .addComponent(rbPresente)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbAusente))
                            .addComponent(txtAtribuirNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlAvaliacaoLayout.createSequentialGroup()
                        .addComponent(txtComentario, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        txtIdAtividade.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtIdAtividade.setForeground(new java.awt.Color(255, 255, 255));
        txtIdAtividade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdAtividade.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtIdAtividade.setEnabled(false);

        lblIdAtividade.setText("ID Atividade");

        txtIdMembro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtIdMembro.setForeground(new java.awt.Color(255, 255, 255));
        txtIdMembro.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdMembro.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtIdMembro.setEnabled(false);

        javax.swing.GroupLayout pnlResumoAtividadeSelecionadaLayout = new javax.swing.GroupLayout(pnlResumoAtividadeSelecionada);
        pnlResumoAtividadeSelecionada.setLayout(pnlResumoAtividadeSelecionadaLayout);
        pnlResumoAtividadeSelecionadaLayout.setHorizontalGroup(
            pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdInscricao, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNomeMembro)
                            .addComponent(txtNomeMembro, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                            .addComponent(lblIdInscricao)
                            .addGap(162, 162, 162)
                            .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblIdAtividade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdAtividade, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDataAtividade, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(txtIdMembro)
                    .addComponent(lblDataAtividade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblIdMembro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(pnlAvaliacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlResumoAtividadeSelecionadaLayout.setVerticalGroup(
            pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDataAtividade)
                    .addComponent(lblIdInscricao)
                    .addComponent(lblIdAtividade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdInscricao, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNomeMembro)
                    .addComponent(lblIdMembro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomeMembro, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdMembro, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
            .addGroup(pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAvaliacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        tabPnlAtividadesDoUsuario.addTab("Avaliação da atividade", new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Notes.png")), pnlResumoAtividadeSelecionada); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTopo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlControles, javax.swing.GroupLayout.DEFAULT_SIZE, 1065, Short.MAX_VALUE)
                    .addComponent(tabPnlBuscar)
                    .addComponent(pnlTabela)
                    .addComponent(tabPnlAtividadesDoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTopo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPnlBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPnlAtividadesDoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabPnlBuscar.getAccessibleContext().setAccessibleName("Por Nome");
        tabPnlAtividadesDoUsuario.getAccessibleContext().setAccessibleName("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        usuario = Sessao.getUsuarioLogado();
        carregarDadosDeInscricoes();
        carregarListaDeAtividades();
    }//GEN-LAST:event_formWindowOpened

    private void btnAvaliarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvaliarActionPerformed
        if (!verificaSeUsuarioLogadoEhInstrutor()) {
            JOptionPane.showMessageDialog(rootPane, "Desculpe, apenas instrutores podem realizar avaliações!", "Ação não autorizada", JOptionPane.INFORMATION_MESSAGE);
            limparSelecao();
        }

        if (verificarPreenchimentoDosCampos() != 2) {
            return;
        } else {
            avaliar();
            limparSelecao();
        }
    }//GEN-LAST:event_btnAvaliarActionPerformed

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnBuscarPorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorIdActionPerformed
        if (!txtBuscarPorId.getText().isBlank()) {
            realizarBuscaDeCadastroPorId();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Digite um ID para realizar a busca!", "Campo de busca vazio", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarPorIdActionPerformed

    private void btnBuscarPorNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorNomeActionPerformed
        if (!txtBuscarPorNome.getText().isBlank()) {
            realizarBuscaDeCadastroPorNomeAtividade();
        } else {
            txtBuscarPorNome.setText("");
            JOptionPane.showMessageDialog(rootPane, "Digite o nome da atividade para realizar a busca!", "Campo de busca vazio", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarPorNomeActionPerformed

    private void btnBuscarPorDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorDataActionPerformed
        if (!txtBuscarPorData.getText().isBlank()) {
            realizarBuscaDeCadastroPorData();
        } else {
            txtBuscarPorData.setText("");
            JOptionPane.showMessageDialog(rootPane, "Digite a data da atividade para realizar a busca!", "Campo de busca vazio", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnBuscarPorDataActionPerformed

    private void btnBuscarPorNomeDoMembroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorNomeDoMembroActionPerformed
        realizarBuscaDeCadastroPorNomeMembro();
    }//GEN-LAST:event_btnBuscarPorNomeDoMembroActionPerformed

    private void tbAvaliacaoAtvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAvaliacaoAtvMouseClicked
        escutarCliquesDoMouseNaTabela(evt);
    }//GEN-LAST:event_tbAvaliacaoAtvMouseClicked

    private void rbPresenteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbPresenteItemStateChanged
        if (rbPresente.isSelected()) {
            txtAtribuirNota.setText("");
            txtAtribuirNota.setEnabled(true);
            isPresente = true;
        }
    }//GEN-LAST:event_rbPresenteItemStateChanged

    private void rbAusenteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbAusenteItemStateChanged
        if (rbAusente.isSelected()) {
            txtAtribuirNota.setText("0");
            txtAtribuirNota.setEnabled(false);
            isPresente = false;
        }
    }//GEN-LAST:event_rbAusenteItemStateChanged

    private void txtAtribuirNotaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtAtribuirNotaInputMethodTextChanged
        impedirAtribuicaoDeNotaInvalida();
    }//GEN-LAST:event_txtAtribuirNotaInputMethodTextChanged

    private void btnBuscarPorTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorTipoActionPerformed
        realizarBuscaDeCadastroPorTipo();
    }//GEN-LAST:event_btnBuscarPorTipoActionPerformed

    private void limparSelecao() {
        txtIdInscricao.setText("");
        txtIdAtividade.setText("");
        txtIdMembro.setText("");
        txtNomeMembro.setText("");
        txtDataAtividade.setText("");
        txtAtribuirNota.setText("");
        txtComentarioAvaliador.setText("");
        rbPresente.setSelected(true);
    }

    private void realizarBuscaDeCadastroPorId() {
        InscricaoAtividade inscricaoAtividade;
        try {
            inscricaoAtividade = new InscricaoAtividadeDAO().buscarPorId(Integer.valueOf(txtBuscarPorId.getText()));

            if (inscricaoAtividade == null || inscricaoAtividade.isAtividadeAvaliada()) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                carregarDadosDeInscricoes();
            } else if (!VerificaDataHora.verificarSeDataHoraJaPassou(inscricaoAtividade.getAtividade().getDataAtividade(),
                    inscricaoAtividade.getAtividade().getHoraAtividade())) {
                preencherTabela(inscricaoAtividade);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private void escutarCliquesDoMouseNaTabela(java.awt.event.MouseEvent evt) {
        int linha = tbAvaliacaoAtv.rowAtPoint(evt.getPoint());
        if (linha >= 0) {
            txtIdInscricao.setText((String) tbAvaliacaoAtv.getValueAt(linha, 0));
            txtIdMembro.setText((String) tbAvaliacaoAtv.getValueAt(linha, 1));
            txtNomeMembro.setText((String) tbAvaliacaoAtv.getValueAt(linha, 2));
            txtIdAtividade.setText((String) tbAvaliacaoAtv.getValueAt(linha, 3));
            txtDataAtividade.setText((String) tbAvaliacaoAtv.getValueAt(linha, 6));
        }
    }

    private void realizarBuscaDeCadastroPorNomeAtividade() {
        List<InscricaoAtividade> inscricaoAtividades;
        try {
            inscricaoAtividades = new InscricaoAtividadeDAO().buscarPorNomeAtividade(txtBuscarPorNome.getText());

            if (inscricaoAtividades.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                carregarDadosDeInscricoes();
            } else {
                preencherTabela(inscricaoAtividades);
            }
        } catch (SQLException | ClassNotFoundException ex) {
           exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private void realizarBuscaDeCadastroPorNomeMembro() {
        List<InscricaoAtividade> inscricaoAtividades;
        try {
            inscricaoAtividades = new InscricaoAtividadeDAO().buscarPorNomeDoMembro(txtBuscarPorNomeDoMembro.getText());

            if (inscricaoAtividades.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                carregarDadosDeInscricoes();
            } else {
                preencherTabela(inscricaoAtividades);
            }
        } catch (SQLException | ClassNotFoundException ex) {
           exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private void realizarBuscaDeCadastroPorTipo() {
        String tipoAtividadeSelecionada = (String) this.cboSelecionarTipo.getSelectedItem();
        List<InscricaoAtividade> inscricoes;
        try {
            ETipoAtividades tipoAtividade = obterTipoDeAtividade(tipoAtividadeSelecionada);
            inscricoes = new InscricaoAtividadeDAO().buscarPorTipo(tipoAtividade);

            if (inscricoes.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                preencherTabela(inscricoes);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private void realizarBuscaDeCadastroPorData() {
        List<InscricaoAtividade> atividades;
        try {
            atividades = new InscricaoAtividadeDAO().buscarPorData(txtBuscarPorData.getText());

            if (atividades.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                preencherTabela(atividades);
            }
        } catch (SQLException | ClassNotFoundException ex) {
           exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    public void carregarDadosDeInscricoes() {
        List<InscricaoAtividade> inscricoesEmAtividades;
        try {
            inscricoesEmAtividades = new InscricaoAtividadeDAO().retornarAtividadesAindaNaoAvaliadas();

            List<InscricaoAtividade> inscricoesValidasParaAvaliacao = new ArrayList<>();
            for (InscricaoAtividade insc : inscricoesEmAtividades) {
                if (!VerificaDataHora.verificarSeDataHoraJaPassou(insc.getAtividade().getDataAtividade(), insc.getAtividade().getHoraAtividade())) {
                    inscricoesValidasParaAvaliacao.add(insc);
                }
            }

            if (inscricoesValidasParaAvaliacao.isEmpty()) {
                nenhumaAtividadeParaAvaliar();
                JOptionPane.showMessageDialog(rootPane, "No momento não existe nenhuma atividade elegível para avaliação.", "Aviso", JOptionPane.WARNING_MESSAGE);
                limparTabela();
            } else {
                existemAtividadesParaAvaliar();
                preencherTabela(inscricoesValidasParaAvaliacao);
            }
        } catch (SQLException | ClassNotFoundException ex) {
           exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private void existemAtividadesParaAvaliar() {
        btnAvaliar.setEnabled(true);
        txtAtribuirNota.setEnabled(true);
        txtComentarioAvaliador.setEnabled(true);
    }

    private void nenhumaAtividadeParaAvaliar() {
        btnAvaliar.setEnabled(false);
        txtAtribuirNota.setEnabled(false);
        txtComentarioAvaliador.setEnabled(false);
    }

    private void preencherTabela(InscricaoAtividade inscricao) throws SQLException, ClassNotFoundException {
        DefaultTableModel tabela = (DefaultTableModel) tbAvaliacaoAtv.getModel();
        limparTabela();

        if (!inscricao.isAtividadeAvaliada()) {
            String[] linha = getDadosAvaliacao(inscricao);
            tabela.addRow(linha);
        }

        centralizarConteudosDaTabela();
    }

    private void preencherTabela(List<InscricaoAtividade> inscricoes) throws SQLException, ClassNotFoundException {
        DefaultTableModel tabela = (DefaultTableModel) tbAvaliacaoAtv.getModel();
        limparTabela();

        for (InscricaoAtividade insc : inscricoes) {
            if (!insc.isAtividadeAvaliada()) {
                String[] linha = getDadosAvaliacao(insc);
                tabela.addRow(linha);
            }
        }

        centralizarConteudosDaTabela();
    }

    private static String[] getDadosAvaliacao(InscricaoAtividade inscricao) {
        return new String[]{
                String.valueOf(inscricao.getId()),
                String.valueOf(inscricao.getMembro().getId()),
                String.format("%s %s", inscricao.getMembro().getNome(), inscricao.getMembro().getSobrenome()),
                String.valueOf(inscricao.getAtividade().getId()),
                inscricao.getAtividade().getNome(),
                inscricao.getAtividade().getTipoAtividade().toString(),
                FormataData.formataDataParaExibicao(inscricao.getAtividade().getDataAtividade()),
                inscricao.getAtividade().getHoraAtividade(),
        };
    }

    private void centralizarConteudosDaTabela() {
        DefaultTableCellRenderer cetralizarConteudo = new DefaultTableCellRenderer();
        cetralizarConteudo.setHorizontalAlignment(SwingConstants.CENTER);
        tbAvaliacaoAtv.getColumnModel().getColumn(0).setCellRenderer(cetralizarConteudo);
        tbAvaliacaoAtv.getColumnModel().getColumn(1).setCellRenderer(cetralizarConteudo);
        tbAvaliacaoAtv.getColumnModel().getColumn(2).setCellRenderer(cetralizarConteudo);
        tbAvaliacaoAtv.getColumnModel().getColumn(3).setCellRenderer(cetralizarConteudo);
        tbAvaliacaoAtv.getColumnModel().getColumn(4).setCellRenderer(cetralizarConteudo);
        tbAvaliacaoAtv.getColumnModel().getColumn(5).setCellRenderer(cetralizarConteudo);
        tbAvaliacaoAtv.getColumnModel().getColumn(6).setCellRenderer(cetralizarConteudo);
        tbAvaliacaoAtv.getColumnModel().getColumn(7).setCellRenderer(cetralizarConteudo);
    }

    private void limparTabela() {
        DefaultTableModel tabela = (DefaultTableModel) tbAvaliacaoAtv.getModel();

        while (tabela.getRowCount() > 0) {
            tabela.removeRow(0);
        }
    }

    private void avaliar() {
        int idInstrutor = Sessao.getUsuarioLogado().getId();
        int idMembro = Integer.parseInt(txtIdMembro.getText());
        int idAtividade = Integer.parseInt(txtIdAtividade.getText());
        String comentarioAvaliador = txtComentarioAvaliador.getText();
        int nota = Integer.parseInt(txtAtribuirNota.getText());
        LocalDateTime dataHoraAtual = LocalDateTime.now();
        int idInscricao = Integer.parseInt(txtIdInscricao.getText());

        try {
            Atividade atividade = new AtividadeDAO().buscarPorId(idAtividade);
            Membro membro = new MembroDAO().buscarPorId(idMembro);
            Instrutor instrutor = new InstrutorDAO().buscarPorId(idInstrutor);

            Avaliacao avaliacao = new Avaliacao(1, membro, atividade, instrutor, nota, comentarioAvaliador, isPresente, dataHoraAtual);
            // Insere a avaliação na base.
            new AvaliacaoDAO().inserir(avaliacao);
            new InscricaoAtividadeDAO().atualizarEstadoAvaliacao(idInscricao, true);

            JOptionPane.showMessageDialog(rootPane, "Avaliação registrada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            carregarDadosDeInscricoes();
        } catch (SQLException | ClassNotFoundException ex) {
            exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private int verificarPreenchimentoDosCampos() {
        impedirAtribuicaoDeNotaInvalida();

        int estadoPreenchimentoCampos = 0;
        if (txtComentarioAvaliador.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Um comentário a respeito da avaliação deve ser feito!", "Atenção", JOptionPane.WARNING_MESSAGE);
            estadoPreenchimentoCampos--;
            txtComentarioAvaliador.requestFocusInWindow();
        } else {
            estadoPreenchimentoCampos++;
        }
        if (txtAtribuirNota.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Uma nota deve ser atribuída para o membro!", "Atenção", JOptionPane.WARNING_MESSAGE);
            estadoPreenchimentoCampos++;
            txtAtribuirNota.requestFocusInWindow();
        } else {
            estadoPreenchimentoCampos++;
        }

        return estadoPreenchimentoCampos;
    }

    private void impedirAtribuicaoDeNotaInvalida() {
        int nota;
        try {
            nota = Integer.parseInt(txtAtribuirNota.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "O campo Atribuir nota deve receber um valor inteiro!", "Preenchimento inválido", JOptionPane.WARNING_MESSAGE);
        }

        if (txtAtribuirNota.getText().length() > 2) {
            JOptionPane.showMessageDialog(rootPane, "A nota deve variar de 0 à 10, tente novamente", "Preenchimento inválido", JOptionPane.WARNING_MESSAGE);
            txtAtribuirNota.setText("");
            txtAtribuirNota.requestFocusInWindow();
        }
    }

    private void carregarListaDeAtividades() {
        for (ETipoAtividades atividade : ETipoAtividades.values()) {
            this.cboSelecionarTipo.addItem(String.valueOf(atividade));
        }
    }

    private Instrutor seUsuarioLogadoForInstrutorRetornaInstancia() {
        Instrutor instrutor = null;
        if (verificaSeUsuarioLogadoEhInstrutor()) {
            instrutor = (Instrutor) usuario;
        }
        return instrutor;
    }

    private boolean verificaSeUsuarioLogadoEhInstrutor() {
        return usuario instanceof Instrutor;
    }

    private ETipoAtividades obterTipoDeAtividade(String tipoAtividadeSelecionada) {
        ETipoAtividades tipoAtividade = null;
        for (ETipoAtividades a : ETipoAtividades.values()) {
            if (a.toString().equals(tipoAtividadeSelecionada)) {
                tipoAtividade = a;
                break;
            }
        }
        return tipoAtividade;
    }

    private void exibeMensagemErroAoRealizarOperacao(Exception ex) {
        JOptionPane.showMessageDialog(rootPane, "Ocorreu um erro ao tentar realizar a operação.\nERRO: " + ex.getMessage(), "Ocorreu um erro", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAvaliacaoAtividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAvaliacaoAtividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAvaliacaoAtividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAvaliacaoAtividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewAvaliacaoAtividades dialog = new ViewAvaliacaoAtividades(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAvaliar;
    private javax.swing.JButton btnBuscarPorData;
    private javax.swing.JButton btnBuscarPorId;
    private javax.swing.JButton btnBuscarPorNome;
    private javax.swing.JButton btnBuscarPorNomeDoMembro;
    private javax.swing.JButton btnBuscarPorTipo;
    private javax.swing.JButton btnFechar;
    private javax.swing.ButtonGroup btnGroupRegistrarPresenca;
    private javax.swing.JComboBox<String> cboSelecionarTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAtribuirNota;
    private javax.swing.JLabel lblComentarioAvaliador;
    private javax.swing.JLabel lblDataAtividade;
    private javax.swing.JLabel lblIdAtividade;
    private javax.swing.JLabel lblIdInscricao;
    private javax.swing.JLabel lblIdMembro;
    private javax.swing.JLabel lblNomeMembro;
    private javax.swing.JLabel lblPresencaAtividade;
    private javax.swing.JPanel pnlAvaliacao;
    private javax.swing.JPanel pnlBuscarPeloNomeDoMembro;
    private javax.swing.JPanel pnlBuscarPorData;
    private javax.swing.JPanel pnlBuscarPorId;
    private javax.swing.JPanel pnlBuscarPorNomeAtividade;
    private javax.swing.JPanel pnlBuscarPorTipo;
    private javax.swing.JPanel pnlControles;
    private javax.swing.JPanel pnlResumoAtividadeSelecionada;
    private javax.swing.JScrollPane pnlTabela;
    private javax.swing.JPanel pnlTopo;
    private javax.swing.JRadioButton rbAusente;
    private javax.swing.JRadioButton rbPresente;
    private javax.swing.JTabbedPane tabPnlAtividadesDoUsuario;
    private javax.swing.JTabbedPane tabPnlBuscar;
    private javax.swing.JTable tbAvaliacaoAtv;
    private javax.swing.JTextField txtAtribuirNota;
    private javax.swing.JFormattedTextField txtBuscarPorData;
    private javax.swing.JTextField txtBuscarPorId;
    private javax.swing.JTextField txtBuscarPorNome;
    private javax.swing.JTextField txtBuscarPorNomeDoMembro;
    private javax.swing.JScrollPane txtComentario;
    private javax.swing.JTextArea txtComentarioAvaliador;
    private javax.swing.JFormattedTextField txtDataAtividade;
    private javax.swing.JTextField txtIdAtividade;
    private javax.swing.JTextField txtIdInscricao;
    private javax.swing.JTextField txtIdMembro;
    private javax.swing.JTextField txtNomeMembro;
    // End of variables declaration//GEN-END:variables
    private Usuario usuario;
    private boolean isPresente = true;
}
