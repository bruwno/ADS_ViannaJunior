/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package br.edu.vianna.sistemaclube.view.visualizacao.inscricoes;

import br.edu.vianna.sistemaclube.dao.impl.AtividadeDAO;
import br.edu.vianna.sistemaclube.dao.impl.InscricaoAtividadeDAO;
import br.edu.vianna.sistemaclube.dao.impl.usuariodao.InstrutorDAO;
import br.edu.vianna.sistemaclube.model.atividades.Atividade;
import br.edu.vianna.sistemaclube.model.atividades.ETipoAtividades;
import br.edu.vianna.sistemaclube.model.inscricoes.InscricaoAtividade;
import br.edu.vianna.sistemaclube.model.usuarios.Instrutor;
import br.edu.vianna.sistemaclube.model.usuarios.Membro;
import br.edu.vianna.sistemaclube.model.usuarios.Usuario;
import br.edu.vianna.sistemaclube.utils.datahora.FormataData;
import br.edu.vianna.sistemaclube.utils.datahora.FormataHora;
import br.edu.vianna.sistemaclube.utils.datahora.VerificaDataHora;
import br.edu.vianna.sistemaclube.utils.login.Sessao;
import br.edu.vianna.sistemaclube.view.cadastros.atividades.ViewCadastroAtividades;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

/**
 * @author William
 */
public class ViewInscreverEmAtividade extends javax.swing.JDialog {

    /**
     * Creates new form ViewDetalhesAtividades
     */
    public ViewInscreverEmAtividade(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ViewInscreverEmAtividade(ViewCadastroAtividades viewCadastroAtividades, boolean modal) {
        super(viewCadastroAtividades, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTopo = new javax.swing.JPanel();
        lblTextoCabecalho = new javax.swing.JLabel();
        pnlControles = new javax.swing.JPanel();
        btnFechar = new javax.swing.JButton();
        btnConfirmarInscricao = new javax.swing.JButton();
        tabPanelBuscar = new javax.swing.JTabbedPane();
        pnlBuscarPorId = new javax.swing.JPanel();
        txtBuscarPorId = new javax.swing.JTextField();
        btnBuscarPorId = new javax.swing.JButton();
        pnlBuscarPorNome = new javax.swing.JPanel();
        txtBuscarPorNome = new javax.swing.JTextField();
        btnBuscarPorNome = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnBuscarPorData = new javax.swing.JButton();
        txtBuscarPorData = new javax.swing.JFormattedTextField();
        pnlBuscarPorTipo = new javax.swing.JPanel();
        btnBuscarPorTipo = new javax.swing.JButton();
        cboSelecionarTipo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbAtividades = new javax.swing.JTable();
        tabPnlAtividadesDoUsuario = new javax.swing.JTabbedPane();
        pnlResumoAtividadeSelecionada = new javax.swing.JPanel();
        txtIdAtividadeSelecionada = new javax.swing.JTextField();
        lblIdAtividadeSelecionada = new javax.swing.JLabel();
        lblNomeAtividadeSelecionada = new javax.swing.JLabel();
        txtNomeAtividade = new javax.swing.JTextField();
        txtDataAtividade = new javax.swing.JFormattedTextField();
        txtHorarioAtividade = new javax.swing.JFormattedTextField();
        lblDataRealizacao = new javax.swing.JLabel();
        lblHorarioRealizacao = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnIncrever = new javax.swing.JButton();
        pnlAtividadesJaInscrito = new javax.swing.JPanel();
        scrollPnlAtividadesJaInscrito = new javax.swing.JScrollPane();
        tbAtividadesJaInscrito = new javax.swing.JTable();
        pnlResumo = new javax.swing.JPanel();
        lblQtdInscricoes = new javax.swing.JLabel();
        txtQtdInscricoes = new javax.swing.JTextField();
        pnlAtividadeSelecionada = new javax.swing.JPanel();
        txtIdInscricaoSelecionada = new javax.swing.JTextField();
        lblIdInscricao = new javax.swing.JLabel();
        txtNomeAtividadeSelecionada = new javax.swing.JTextField();
        lblNomeAtividadeJaInscrito = new javax.swing.JLabel();
        btnDesinscrever = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Inscrever um uma atividade");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlTopo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblTextoCabecalho.setFont(new java.awt.Font("Segoe UI Black", 0, 14)); // NOI18N
        lblTextoCabecalho.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTextoCabecalho.setText("Atividades disponíveis para inscrição");
        lblTextoCabecalho.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlTopoLayout = new javax.swing.GroupLayout(pnlTopo);
        pnlTopo.setLayout(pnlTopoLayout);
        pnlTopoLayout.setHorizontalGroup(
            pnlTopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTextoCabecalho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTopoLayout.setVerticalGroup(
            pnlTopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTopoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTextoCabecalho)
                .addContainerGap())
        );

        pnlControles.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlControles.setPreferredSize(new java.awt.Dimension(952, 50));

        btnFechar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Cancel.png"))); // NOI18N
        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        btnConfirmarInscricao.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnConfirmarInscricao.setForeground(new java.awt.Color(204, 204, 204));
        btnConfirmarInscricao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/OK.png"))); // NOI18N
        btnConfirmarInscricao.setText("Confirmar inscrição");
        btnConfirmarInscricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarInscricaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlesLayout = new javax.swing.GroupLayout(pnlControles);
        pnlControles.setLayout(pnlControlesLayout);
        pnlControlesLayout.setHorizontalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnConfirmarInscricao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlControlesLayout.setVerticalGroup(
            pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlControlesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnConfirmarInscricao, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(btnFechar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tabPanelBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Buscar atividade", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        tabPanelBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txtBuscarPorId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtBuscarPorId.setForeground(new java.awt.Color(255, 255, 255));
        txtBuscarPorId.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnBuscarPorId.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorId.setText("Buscar");
        btnBuscarPorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBuscarPorIdLayout = new javax.swing.GroupLayout(pnlBuscarPorId);
        pnlBuscarPorId.setLayout(pnlBuscarPorIdLayout);
        pnlBuscarPorIdLayout.setHorizontalGroup(
            pnlBuscarPorIdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarPorIdLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(txtBuscarPorId, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorId, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarPorIdLayout.setVerticalGroup(
            pnlBuscarPorIdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarPorIdLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnlBuscarPorIdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarPorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPorId))
                .addContainerGap())
        );

        tabPanelBuscar.addTab("Por ID", pnlBuscarPorId);

        txtBuscarPorNome.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtBuscarPorNome.setForeground(new java.awt.Color(255, 255, 255));
        txtBuscarPorNome.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnBuscarPorNome.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorNome.setText("Buscar");
        btnBuscarPorNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorNomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBuscarPorNomeLayout = new javax.swing.GroupLayout(pnlBuscarPorNome);
        pnlBuscarPorNome.setLayout(pnlBuscarPorNomeLayout);
        pnlBuscarPorNomeLayout.setHorizontalGroup(
            pnlBuscarPorNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarPorNomeLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(txtBuscarPorNome, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorNome, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarPorNomeLayout.setVerticalGroup(
            pnlBuscarPorNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarPorNomeLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnlBuscarPorNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarPorNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarPorNome))
                .addContainerGap())
        );

        tabPanelBuscar.addTab("Por Nome", pnlBuscarPorNome);

        btnBuscarPorData.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorData.setText("Buscar");
        btnBuscarPorData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorDataActionPerformed(evt);
            }
        });

        txtBuscarPorData.setForeground(new java.awt.Color(255, 255, 255));
        try {
            txtBuscarPorData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtBuscarPorData.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBuscarPorData.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(txtBuscarPorData, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorData, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarPorData)
                    .addComponent(txtBuscarPorData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabPanelBuscar.addTab("Por Data", jPanel1);

        btnBuscarPorTipo.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBuscarPorTipo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Zoom.png"))); // NOI18N
        btnBuscarPorTipo.setText("Buscar");
        btnBuscarPorTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPorTipoActionPerformed(evt);
            }
        });

        cboSelecionarTipo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cboSelecionarTipo.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlBuscarPorTipoLayout = new javax.swing.GroupLayout(pnlBuscarPorTipo);
        pnlBuscarPorTipo.setLayout(pnlBuscarPorTipoLayout);
        pnlBuscarPorTipoLayout.setHorizontalGroup(
            pnlBuscarPorTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscarPorTipoLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(cboSelecionarTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarPorTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBuscarPorTipoLayout.setVerticalGroup(
            pnlBuscarPorTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscarPorTipoLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnlBuscarPorTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarPorTipo)
                    .addComponent(cboSelecionarTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabPanelBuscar.addTab("Buscar por Tipo", pnlBuscarPorTipo);

        tbAtividades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Nome", "Tipo", "Descrição", "Data", "Horário", "Instrutor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAtividades.setShowGrid(true);
        tbAtividades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbAtividadesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbAtividades);
        if (tbAtividades.getColumnModel().getColumnCount() > 0) {
            tbAtividades.getColumnModel().getColumn(0).setMinWidth(65);
            tbAtividades.getColumnModel().getColumn(0).setPreferredWidth(65);
            tbAtividades.getColumnModel().getColumn(0).setMaxWidth(60);
            tbAtividades.getColumnModel().getColumn(1).setMinWidth(100);
            tbAtividades.getColumnModel().getColumn(3).setMinWidth(190);
        }

        tabPnlAtividadesDoUsuario.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tabPnlAtividadesDoUsuario.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPnlAtividadesDoUsuarioStateChanged(evt);
            }
        });

        txtIdAtividadeSelecionada.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtIdAtividadeSelecionada.setForeground(new java.awt.Color(255, 255, 255));
        txtIdAtividadeSelecionada.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdAtividadeSelecionada.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtIdAtividadeSelecionada.setEnabled(false);

        lblIdAtividadeSelecionada.setText("ID da atividade");

        lblNomeAtividadeSelecionada.setText("Nome da atividade");

        txtNomeAtividade.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtNomeAtividade.setForeground(new java.awt.Color(255, 255, 255));
        txtNomeAtividade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNomeAtividade.setEnabled(false);

        txtDataAtividade.setForeground(new java.awt.Color(255, 255, 255));
        try {
            txtDataAtividade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataAtividade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDataAtividade.setEnabled(false);
        txtDataAtividade.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtHorarioAtividade.setForeground(new java.awt.Color(255, 255, 255));
        try {
            txtHorarioAtividade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtHorarioAtividade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtHorarioAtividade.setEnabled(false);
        txtHorarioAtividade.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        lblDataRealizacao.setText("Data de realização");

        lblHorarioRealizacao.setText("Horário da atividade");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Realizar inscrição", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        btnIncrever.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnIncrever.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Create.png"))); // NOI18N
        btnIncrever.setText("Inscrever na atividade");
        btnIncrever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncreverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnIncrever, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnIncrever, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlResumoAtividadeSelecionadaLayout = new javax.swing.GroupLayout(pnlResumoAtividadeSelecionada);
        pnlResumoAtividadeSelecionada.setLayout(pnlResumoAtividadeSelecionadaLayout);
        pnlResumoAtividadeSelecionadaLayout.setHorizontalGroup(
            pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                        .addComponent(lblNomeAtividadeSelecionada)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                        .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblIdAtividadeSelecionada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtIdAtividadeSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(98, 329, Short.MAX_VALUE)
                        .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                                .addComponent(lblDataRealizacao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblHorarioRealizacao))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                                .addComponent(txtDataAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtHorarioAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(txtNomeAtividade))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlResumoAtividadeSelecionadaLayout.setVerticalGroup(
            pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdAtividadeSelecionada)
                    .addComponent(lblDataRealizacao)
                    .addComponent(lblHorarioRealizacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlResumoAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdAtividadeSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHorarioAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNomeAtividadeSelecionada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtNomeAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(pnlResumoAtividadeSelecionadaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPnlAtividadesDoUsuario.addTab("Atividade selecionada para inscrição", new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Script.png")), pnlResumoAtividadeSelecionada); // NOI18N

        tbAtividadesJaInscrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nº Inscrição", "Nome da atividade", "Data", "Horário"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAtividadesJaInscrito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbAtividadesJaInscritoMouseClicked(evt);
            }
        });
        scrollPnlAtividadesJaInscrito.setViewportView(tbAtividadesJaInscrito);
        if (tbAtividadesJaInscrito.getColumnModel().getColumnCount() > 0) {
            tbAtividadesJaInscrito.getColumnModel().getColumn(0).setPreferredWidth(100);
            tbAtividadesJaInscrito.getColumnModel().getColumn(0).setMaxWidth(100);
            tbAtividadesJaInscrito.getColumnModel().getColumn(2).setMaxWidth(150);
            tbAtividadesJaInscrito.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        pnlResumo.setBorder(javax.swing.BorderFactory.createTitledBorder("Resumo"));

        lblQtdInscricoes.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.GreyInline"));
        lblQtdInscricoes.setText("Qtd inscrições");

        txtQtdInscricoes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtQtdInscricoes.setForeground(new java.awt.Color(255, 255, 255));
        txtQtdInscricoes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtQtdInscricoes.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtQtdInscricoes.setEnabled(false);

        javax.swing.GroupLayout pnlResumoLayout = new javax.swing.GroupLayout(pnlResumo);
        pnlResumo.setLayout(pnlResumoLayout);
        pnlResumoLayout.setHorizontalGroup(
            pnlResumoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlResumoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlResumoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtQtdInscricoes, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQtdInscricoes))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlResumoLayout.setVerticalGroup(
            pnlResumoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlResumoLayout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(lblQtdInscricoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtQtdInscricoes, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlAtividadeSelecionada.setBorder(javax.swing.BorderFactory.createTitledBorder("Atividade selecionada"));

        txtIdInscricaoSelecionada.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtIdInscricaoSelecionada.setForeground(new java.awt.Color(255, 255, 255));
        txtIdInscricaoSelecionada.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdInscricaoSelecionada.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtIdInscricaoSelecionada.setEnabled(false);

        lblIdInscricao.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.GreyInline"));
        lblIdInscricao.setText("ID da inscrição");

        txtNomeAtividadeSelecionada.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtNomeAtividadeSelecionada.setForeground(new java.awt.Color(255, 255, 255));
        txtNomeAtividadeSelecionada.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNomeAtividadeSelecionada.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtNomeAtividadeSelecionada.setEnabled(false);

        lblNomeAtividadeJaInscrito.setForeground(javax.swing.UIManager.getDefaults().getColor("Actions.GreyInline"));
        lblNomeAtividadeJaInscrito.setText("Nome da atividade");

        btnDesinscrever.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnDesinscrever.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Erase.png"))); // NOI18N
        btnDesinscrever.setText("Desinscrever da atividade");
        btnDesinscrever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesinscreverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAtividadeSelecionadaLayout = new javax.swing.GroupLayout(pnlAtividadeSelecionada);
        pnlAtividadeSelecionada.setLayout(pnlAtividadeSelecionadaLayout);
        pnlAtividadeSelecionadaLayout.setHorizontalGroup(
            pnlAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAtividadeSelecionadaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNomeAtividadeSelecionada)
                    .addGroup(pnlAtividadeSelecionadaLayout.createSequentialGroup()
                        .addGroup(pnlAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNomeAtividadeJaInscrito)
                            .addComponent(lblIdInscricao))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlAtividadeSelecionadaLayout.createSequentialGroup()
                        .addComponent(txtIdInscricaoSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(btnDesinscrever)))
                .addContainerGap())
        );
        pnlAtividadeSelecionadaLayout.setVerticalGroup(
            pnlAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAtividadeSelecionadaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAtividadeSelecionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAtividadeSelecionadaLayout.createSequentialGroup()
                        .addComponent(lblIdInscricao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdInscricaoSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnDesinscrever, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblNomeAtividadeJaInscrito)
                .addGap(1, 1, 1)
                .addComponent(txtNomeAtividadeSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout pnlAtividadesJaInscritoLayout = new javax.swing.GroupLayout(pnlAtividadesJaInscrito);
        pnlAtividadesJaInscrito.setLayout(pnlAtividadesJaInscritoLayout);
        pnlAtividadesJaInscritoLayout.setHorizontalGroup(
            pnlAtividadesJaInscritoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAtividadesJaInscritoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPnlAtividadesJaInscrito, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlResumo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAtividadeSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlAtividadesJaInscritoLayout.setVerticalGroup(
            pnlAtividadesJaInscritoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAtividadesJaInscritoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAtividadesJaInscritoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlResumo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPnlAtividadesJaInscrito, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(pnlAtividadeSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 139, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPnlAtividadesDoUsuario.addTab("Minhas inscrições", new javax.swing.ImageIcon(getClass().getResource("/img/16x16/Notes.png")), pnlAtividadesJaInscrito); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTopo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlControles, javax.swing.GroupLayout.DEFAULT_SIZE, 1065, Short.MAX_VALUE)
                    .addComponent(tabPanelBuscar)
                    .addComponent(jScrollPane2)
                    .addComponent(tabPnlAtividadesDoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTopo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPanelBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPnlAtividadesDoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlControles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabPanelBuscar.getAccessibleContext().setAccessibleName("Por Nome");
        tabPnlAtividadesDoUsuario.getAccessibleContext().setAccessibleName("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        usuario = Sessao.getUsuarioLogado();
        listaDeAtividadesCadastradas.addAll(carregarAtividadesCadastradas());
        carregarListaDeAtividadesNoComboBox();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        carregarAtividadesCadastradas();
    }//GEN-LAST:event_formWindowGainedFocus

    private void btnIncreverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncreverActionPerformed
        if (!verificaSeUsuarioLogadoEhMembro()) {
            JOptionPane.showMessageDialog(rootPane, "Desculpe, apenas membros podem se inscrever nas atividades!", "Ação não autorizada", JOptionPane.INFORMATION_MESSAGE);
            limparSelecao();
            return;
        }

        if (txtIdAtividadeSelecionada.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Clique em uma atividade para selecioná-la.", "Nenhuma atividade selecionada", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (verificarSeOMembroJaEstaInscrito()) {
            JOptionPane.showMessageDialog(rootPane, "Você já está inscrito nesta atividade!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            limparSelecao();
            return;
        }

        if (txtIdAtividadeSelecionada.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Para se inscrever em uma atividade clique sobre ela na tabela de atividades disponíveis " +
                    "e depois clique no botão Inscrever na atividade.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        } else {
            inscrever();
            limparSelecao();
        }
    }//GEN-LAST:event_btnIncreverActionPerformed

    private void btnDesinscreverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesinscreverActionPerformed
        desinscrever();
    }//GEN-LAST:event_btnDesinscreverActionPerformed

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btnBuscarPorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorIdActionPerformed
        if (!txtBuscarPorId.getText().isBlank()) {
            realizarBuscaDeCadastroPorId();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Digite um ID para realizar a busca!", "Campo de busca vazio", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarPorIdActionPerformed

    private void btnBuscarPorNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorNomeActionPerformed
        if (!txtBuscarPorNome.getText().isBlank()) {
            realizarBuscaDeCadastroPorNome();
        } else {
            txtBuscarPorNome.setText("");
            JOptionPane.showMessageDialog(rootPane, "Digite o nome da atividade para realizar a busca!", "Campo de busca vazio", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarPorNomeActionPerformed

    private void btnBuscarPorTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorTipoActionPerformed
        realizarBuscaDeCadastroPorTipo();
    }//GEN-LAST:event_btnBuscarPorTipoActionPerformed

    private void btnBuscarPorDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPorDataActionPerformed
        realizarBuscaDeCadastroPorData();
    }//GEN-LAST:event_btnBuscarPorDataActionPerformed

    private void tbAtividadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAtividadesMouseClicked
        escutarCliquesDoMouseNaTabela(evt);
    }//GEN-LAST:event_tbAtividadesMouseClicked

    private void tbAtividadesJaInscritoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAtividadesJaInscritoMouseClicked
        escutarCliquesDoMouseNaTabelaDeAtividadeJaInscrito(evt);
    }//GEN-LAST:event_tbAtividadesJaInscritoMouseClicked

    private void tabPnlAtividadesDoUsuarioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPnlAtividadesDoUsuarioStateChanged
        contabilizarQtdInscricoes();
        carregarAtividadesQueMembroJaEstaInscrito();
    }//GEN-LAST:event_tabPnlAtividadesDoUsuarioStateChanged

    private void btnConfirmarInscricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarInscricaoActionPerformed
        confirmarInscricoes();
    }//GEN-LAST:event_btnConfirmarInscricaoActionPerformed

    private void limparSelecao() {
        txtIdAtividadeSelecionada.setText("");
        txtIdInscricaoSelecionada.setText("");
        txtNomeAtividade.setText("");
        txtDataAtividade.setText("");
        txtHorarioAtividade.setText("");
    }

    private void escutarCliquesDoMouseNaTabela(java.awt.event.MouseEvent evt) {
        int linha = tbAtividades.rowAtPoint(evt.getPoint());
        if (linha >= 0) {
            txtIdAtividadeSelecionada.setText((String) tbAtividades.getValueAt(linha, 0)); // ID atividade clicada.
            txtNomeAtividade.setText((String) tbAtividades.getValueAt(linha, 1));
            txtDataAtividade.setText((String) tbAtividades.getValueAt(linha, 4));
            txtHorarioAtividade.setText((String) tbAtividades.getValueAt(linha, 5));
        }
    }

    private void escutarCliquesDoMouseNaTabelaDeAtividadeJaInscrito(java.awt.event.MouseEvent evt) {
        int linha = tbAtividadesJaInscrito.rowAtPoint(evt.getPoint());
        if (linha >= 0) {
            txtIdInscricaoSelecionada.setText((String) tbAtividadesJaInscrito.getValueAt(linha, 0)); // ID inscrição clicada.
            txtNomeAtividadeSelecionada.setText((String) tbAtividadesJaInscrito.getValueAt(linha, 1));
        }
    }

    private void realizarBuscaDeCadastroPorId() {
        Atividade atividade;
        try {
            atividade = new AtividadeDAO().buscarPorId(Integer.valueOf(txtBuscarPorId.getText()));

            if (atividade == null) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                if (VerificaDataHora.verificarSeDataHoraJaPassou(atividade.getDataAtividade(), atividade.getHoraAtividade())) {
                    preencherTabela(atividade);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "A atividade que você buscou não está cadastrada na base ou não " +
                            "está mais disponível para receber inscrições.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private void realizarBuscaDeCadastroPorNome() {
        List<Atividade> atividades;
        try {
            atividades = new AtividadeDAO().buscarPorNome(txtBuscarPorNome.getText());

            if (atividades.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                preencherTabela(atividades);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private void realizarBuscaDeCadastroPorTipo() {
        String tipoAtividadeSelecionada = (String) this.cboSelecionarTipo.getSelectedItem();
        List<Atividade> atividades;
        try {
            ETipoAtividades tipoAtividade = obterTipoDeAtividade(tipoAtividadeSelecionada);
            atividades = new AtividadeDAO().buscarPorTipo(tipoAtividade);

            if (atividades.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                preencherTabela(atividades);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private void realizarBuscaDeCadastroPorData() {
        List<Atividade> atividades;
        try {
            atividades = new AtividadeDAO().buscarPorData(txtBuscarPorData.getText());

            if (atividades.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "A busca não retornou nenhum resultado!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                preencherTabela(atividades);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    private List<Atividade> carregarAtividadesCadastradas() {
        List<Atividade> atividades = new ArrayList<>();
        try {
            atividades = new AtividadeDAO().buscarTodos();

            if (atividades.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Nenhuma atividade foi encontrada.", "Aviso", JOptionPane.WARNING_MESSAGE);
            } else {
                preencherTabela(atividades);
            }
        } catch (SQLException | ClassNotFoundException ex) {
           exibeMensagemErroAoRealizarOperacao(ex);
        }

        return atividades;
    }
    
    private static ETipoAtividades obterTipoDeAtividade(String tipoAtividadeSelecionada) {
        ETipoAtividades tipoAtividade = null;
        for (ETipoAtividades a : ETipoAtividades.values()) {
            if (a.toString().equals(tipoAtividadeSelecionada)) {
                tipoAtividade = a;
                break;
            }
        }
        return tipoAtividade;
    }

    private void preencherTabela(List<Atividade> atividades) throws SQLException, ClassNotFoundException {
        DefaultTableModel tabela = (DefaultTableModel) tbAtividades.getModel();

        while (tabela.getRowCount() > 0) {
            tabela.removeRow(0);
        }

        for (Atividade atv : atividades) {
            Instrutor instrutor = new InstrutorDAO().buscarPorId(atv.getIdInstrutor());

            if (VerificaDataHora.verificarSeDataHoraJaPassou(atv.getDataAtividade(), atv.getHoraAtividade())) {
                String[] linha = getDadosAtividades(atv, instrutor);
                tabela.addRow(linha);
            }
        }

        centralizarConteudosDaTabela();
    }

    private void preencherTabela(Atividade atv) throws SQLException, ClassNotFoundException {
        DefaultTableModel tabela = (DefaultTableModel) tbAtividades.getModel();

        while (tabela.getRowCount() > 0) {
            tabela.removeRow(0);
        }
        Instrutor instrutor = new InstrutorDAO().buscarPorId(atv.getIdInstrutor());

        String[] linha = getDadosAtividades(atv, instrutor);
        tabela.addRow(linha);

        centralizarConteudosDaTabela();
    }

    private void preencherTabelaAtividadesJaInscrito(List<InscricaoAtividade> inscricaoAtividade) {
        DefaultTableModel tabela = (DefaultTableModel) tbAtividadesJaInscrito.getModel();

        while (tabela.getRowCount() > 0) {
            tabela.removeRow(0);
        }

        for (InscricaoAtividade atividade : inscricaoAtividade) {
            if (!atividade.isAtividadeAvaliada()) {
                String[] linha = {
                        String.valueOf(atividade.getId()), atividade.getAtividade().getNome(),
                        FormataData.formataDataParaExibicao(atividade.getAtividade().getDataAtividade()),
                        atividade.getAtividade().getHoraAtividade(),
                };
                tabela.addRow(linha);
            }
        }
    }

    private static String[] getDadosAtividades(Atividade atv, Instrutor instrutor) {
        return new String[]{
                String.valueOf(atv.getId()),
                atv.getNome(),
                String.valueOf(atv.getTipoAtividade()), atv.getDescricao(),
                FormataData.formataDataParaExibicao(atv.getDataAtividade()),
                atv.getHoraAtividade(),
                String.format("%s %s", instrutor.getNome(), instrutor.getSobrenome())
        };
    }

    private void centralizarConteudosDaTabela() {
        DefaultTableCellRenderer cetralizarConteudo = new DefaultTableCellRenderer();
        cetralizarConteudo.setHorizontalAlignment(SwingConstants.CENTER);
        tbAtividades.getColumnModel().getColumn(0).setCellRenderer(cetralizarConteudo);
        tbAtividades.getColumnModel().getColumn(1).setCellRenderer(cetralizarConteudo);
        tbAtividades.getColumnModel().getColumn(2).setCellRenderer(cetralizarConteudo);
        tbAtividades.getColumnModel().getColumn(3).setCellRenderer(cetralizarConteudo);
        tbAtividades.getColumnModel().getColumn(4).setCellRenderer(cetralizarConteudo);
        tbAtividades.getColumnModel().getColumn(5).setCellRenderer(cetralizarConteudo);
        tbAtividades.getColumnModel().getColumn(6).setCellRenderer(cetralizarConteudo);
    }

    private void carregarListaDeAtividadesNoComboBox() {
        for (ETipoAtividades atividade : ETipoAtividades.values()) {
            this.cboSelecionarTipo.addItem(String.valueOf(atividade));
        }
    }

    // INSCRIÇÃO.
    private void inscrever() {
        Membro membro = seUsuarioLogadoForMembroRetornaInstancia();
        String dataInscricao = FormataData.formataDataParaExibicao(String.valueOf(LocalDate.now()));
        String horaInscricao = FormataHora.formataHoraParaString(LocalTime.now());

        Atividade atividade = new Atividade();
        for (Atividade atv : listaDeAtividadesCadastradas) {
            if (atv.getId() == Integer.valueOf(txtIdAtividadeSelecionada.getText())) {
                atividade = atv;
            }
        }

        InscricaoAtividade inscricaoAtividade = new InscricaoAtividade(atividade.getId(), membro, atividade, dataInscricao, horaInscricao, false);

        adicionarAtividadeNaListaDeInscricoes(inscricaoAtividade);

        JOptionPane.showMessageDialog(rootPane, "Inscrição adicionada com sucesso na lista!\nNº da inscrição: " +
                inscricaoAtividade.getId() + "\nAtividade: " +  inscricaoAtividade.getAtividade().getNome(),
                "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        contabilizarQtdInscricoes();
        carregarAtividadesQueMembroJaEstaInscrito();
    }

    private void confirmarInscricao(InscricaoAtividade inscricao) {
        try {
            new InscricaoAtividadeDAO().inserir(inscricao);
            JOptionPane.showMessageDialog(rootPane, "Inscrição realizada com sucesso!\nNº da inscrição: " + inscricao.getId(), "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            contabilizarQtdInscricoes();
            carregarAtividadesQueMembroJaEstaInscrito();
        } catch (SQLException | ClassNotFoundException ex) {
           exibeMensagemErroAoRealizarOperacao(ex);
        }
    }

    public void confirmarInscricoes() {
        for (InscricaoAtividade inscricao : listaDeInscricoes) {
            confirmarInscricao(inscricao);
        }
        listaDeInscricoes.clear();
        limparTabelaJaInscrito();
    }

    public void limparTabelaJaInscrito() {
        DefaultTableModel tabela = (DefaultTableModel) tbAtividadesJaInscrito.getModel();

        while (tabela.getRowCount() > 0) {
            tabela.removeRow(0);
        }
    }

    private void adicionarAtividadeNaListaDeInscricoes(InscricaoAtividade inscricaoAtividade) {
        if (inscricaoAtividade != null) {
            this.listaDeInscricoes.add(inscricaoAtividade);
        }
    }

    private void removerAtividadeNaListaDeInscricoes(InscricaoAtividade inscricaoAtividade) {
        if (inscricaoAtividade != null) {
            this.listaDeInscricoes.remove(inscricaoAtividade);
        }
    }

    // DESINSCRIÇÃO.
    private void desinscrever() {
        Membro membro = seUsuarioLogadoForMembroRetornaInstancia();
        if (!verificaSeUsuarioLogadoEhMembro()) {
            JOptionPane.showMessageDialog(rootPane, "Desculpe, este recurso está disponível apenas para membros.", "Ação não autorizada", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (txtIdInscricaoSelecionada.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Não existem atividades na sua lista de inscrições!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        InscricaoAtividade minhaInscricao = getInscricaoAtividade(membro);

        int opcaoSelecionada = JOptionPane.showConfirmDialog(rootPane, "Confirmar a remoção da inscrição?", "Desinscrever", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opcaoSelecionada == JOptionPane.YES_OPTION) {
            if (minhaInscricao != null) {
                removerAtividadeNaListaDeInscricoes(minhaInscricao);
                JOptionPane.showMessageDialog(rootPane, "Você se desinscreveu da atividade: " + minhaInscricao.getAtividade().getNome(), "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                limparSelecao();
                atualizarTabelaAtividadesJaInscrito();
                contabilizarQtdInscricoes();
            }
        }
    }

    private void atualizarTabelaAtividadesJaInscrito() {
        preencherTabelaAtividadesJaInscrito(listaDeInscricoes);
    }

    private void carregarAtividadesQueMembroJaEstaInscrito() {
        if (!verificaSeUsuarioLogadoEhMembro()) {
            return;
        }

        List<InscricaoAtividade> inscricoes = listaDeInscricoes;
        assert inscricoes != null;
        if (inscricoes.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Você ainda não se inscreveu em nenhuma atividade.", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            preencherTabelaAtividadesJaInscrito(inscricoes);
        }
    }

    // Auxiliares.
    private InscricaoAtividade getInscricaoAtividade(Membro membro) {
        List<InscricaoAtividade> inscricaoAtividade = listaDeInscricoes;

        int idInscricaoSelecionada = Integer.parseInt(txtIdInscricaoSelecionada.getText());
        InscricaoAtividade minhaInscricao = null;

        assert inscricaoAtividade != null;
        for (InscricaoAtividade inscricao : inscricaoAtividade) {
            int idInscricao = inscricao.getId();
            if (idInscricao == idInscricaoSelecionada) {
                minhaInscricao = inscricao;
                break;
            }
        }
        return minhaInscricao;
    }

    private boolean verificarSeOMembroJaEstaInscrito() {
        Membro membro = seUsuarioLogadoForMembroRetornaInstancia();
        boolean resultado = false;
        int idAtividade = Integer.parseInt(txtIdAtividadeSelecionada.getText());

        for (InscricaoAtividade inscricao : listaDeInscricoes) {
            if (inscricao.getAtividade().getId() == idAtividade) {
                resultado = true;
                break;
            }
        }

        if (!resultado) {
            try {
                List<InscricaoAtividade> inscricaoAtividadesMembroLogado = new InscricaoAtividadeDAO().buscarTodosPorIdMembro(membro.getId());

                for (InscricaoAtividade inscricaoAtividade : inscricaoAtividadesMembroLogado) {
                    if (idAtividade == inscricaoAtividade.getAtividade().getId() && !inscricaoAtividade.isAtividadeAvaliada()) {
                        resultado = true;
                        break;
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                exibeMensagemErroAoRealizarOperacao(ex);
            }
        }

        return resultado;
    }

    private Membro seUsuarioLogadoForMembroRetornaInstancia() {
        Membro membro = null;
        if (verificaSeUsuarioLogadoEhMembro()) {
            membro = (Membro) usuario;
        }
        return membro;
    }

    private boolean verificaSeUsuarioLogadoEhMembro() {
        return usuario instanceof Membro;
    }

    private void contabilizarQtdInscricoes() {
        Membro membro = seUsuarioLogadoForMembroRetornaInstancia();
        if (!verificaSeUsuarioLogadoEhMembro()) {
            return;
        }

        if (membro != null) {
            for (InscricaoAtividade atv : listaDeInscricoes) {
                if (VerificaDataHora.verificarSeDataHoraJaPassou(atv.getAtividade().getDataAtividade(),
                        atv.getAtividade().getHoraAtividade()) && !atv.isAtividadeAvaliada()) {
                    txtQtdInscricoes.setText(String.valueOf(listaDeInscricoes.size()));
                } else {
                    txtQtdInscricoes.setText("0");
                }
            }
        }
    }

    private void exibeMensagemErroAoRealizarOperacao(Exception ex) {
        JOptionPane.showMessageDialog(rootPane, "Ocorreu um erro ao tentar realizar a operação!\nERRO: " + ex.getMessage(), "Ocorreu um erro", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewInscreverEmAtividade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewInscreverEmAtividade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewInscreverEmAtividade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewInscreverEmAtividade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewInscreverEmAtividade dialog = new ViewInscreverEmAtividade(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPorData;
    private javax.swing.JButton btnBuscarPorId;
    private javax.swing.JButton btnBuscarPorNome;
    private javax.swing.JButton btnBuscarPorTipo;
    private javax.swing.JButton btnConfirmarInscricao;
    private javax.swing.JButton btnDesinscrever;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnIncrever;
    private javax.swing.JComboBox<String> cboSelecionarTipo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDataRealizacao;
    private javax.swing.JLabel lblHorarioRealizacao;
    private javax.swing.JLabel lblIdAtividadeSelecionada;
    private javax.swing.JLabel lblIdInscricao;
    private javax.swing.JLabel lblNomeAtividadeJaInscrito;
    private javax.swing.JLabel lblNomeAtividadeSelecionada;
    private javax.swing.JLabel lblQtdInscricoes;
    private javax.swing.JLabel lblTextoCabecalho;
    private javax.swing.JPanel pnlAtividadeSelecionada;
    private javax.swing.JPanel pnlAtividadesJaInscrito;
    private javax.swing.JPanel pnlBuscarPorId;
    private javax.swing.JPanel pnlBuscarPorNome;
    private javax.swing.JPanel pnlBuscarPorTipo;
    private javax.swing.JPanel pnlControles;
    private javax.swing.JPanel pnlResumo;
    private javax.swing.JPanel pnlResumoAtividadeSelecionada;
    private javax.swing.JPanel pnlTopo;
    private javax.swing.JScrollPane scrollPnlAtividadesJaInscrito;
    private javax.swing.JTabbedPane tabPanelBuscar;
    private javax.swing.JTabbedPane tabPnlAtividadesDoUsuario;
    private javax.swing.JTable tbAtividades;
    private javax.swing.JTable tbAtividadesJaInscrito;
    private javax.swing.JFormattedTextField txtBuscarPorData;
    private javax.swing.JTextField txtBuscarPorId;
    private javax.swing.JTextField txtBuscarPorNome;
    private javax.swing.JFormattedTextField txtDataAtividade;
    private javax.swing.JFormattedTextField txtHorarioAtividade;
    private javax.swing.JTextField txtIdAtividadeSelecionada;
    private javax.swing.JTextField txtIdInscricaoSelecionada;
    private javax.swing.JTextField txtNomeAtividade;
    private javax.swing.JTextField txtNomeAtividadeSelecionada;
    private javax.swing.JTextField txtQtdInscricoes;
    // End of variables declaration//GEN-END:variables
    private Usuario usuario;
    private List<Atividade> listaDeAtividadesCadastradas = new ArrayList<>();
    private List<InscricaoAtividade> listaDeInscricoes = new ArrayList<>();
}
