{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Apresenta\u00e7\u00e3o Prof. Ms. Gildo de Almeida Leonel Plano de ensino N\u00famero de aulas por semana: 4 Quantidade total de horas: 80 Aulas Ter\u00e7a-Feira de 19:00 \u00e0s 20:20 (1a e 2a aula). Quinta-Feira de 19:00 \u00e0s 20:20 (1a e 2a aula). Crit\u00e9rios para aprova\u00e7\u00e3o Para aprova\u00e7\u00e3o na disciplina o aluno dever\u00e1: Frequentar, no m\u00ednimo, 75% das aulas ministradas. Atingir resultado igual ou superior a 7,0 , calculado a partir da m\u00e9dia aritm\u00e9tica entre os graus das avalia\u00e7\u00f5es. 1\u00ba Bimestre Trabalho \u2013 2,0 pontos Prova \u2013 3,0 pontos Atividades avaliativas \u2013 4,0 Atividade pr\u00e1tica supervisionada (APS) \u2013 1,0 2\u00ba Bimestre Avalia\u00e7\u00e3o Segmentada \u2013 2,0 Trabalho \u2013 2,0 pontos Prova \u2013 2,0 pontos Atividades avaliativas \u2013 3,0 Atividade pr\u00e1tica supervisionada \u2013 1,0","title":"Apresenta\u00e7\u00e3o"},{"location":"#apresentacao","text":"Prof. Ms. Gildo de Almeida Leonel","title":"Apresenta\u00e7\u00e3o"},{"location":"#plano-de-ensino","text":"N\u00famero de aulas por semana: 4 Quantidade total de horas: 80","title":"Plano de ensino"},{"location":"#aulas","text":"Ter\u00e7a-Feira de 19:00 \u00e0s 20:20 (1a e 2a aula). Quinta-Feira de 19:00 \u00e0s 20:20 (1a e 2a aula).","title":"Aulas"},{"location":"#criterios-para-aprovacao","text":"Para aprova\u00e7\u00e3o na disciplina o aluno dever\u00e1: Frequentar, no m\u00ednimo, 75% das aulas ministradas. Atingir resultado igual ou superior a 7,0 , calculado a partir da m\u00e9dia aritm\u00e9tica entre os graus das avalia\u00e7\u00f5es. 1\u00ba Bimestre Trabalho \u2013 2,0 pontos Prova \u2013 3,0 pontos Atividades avaliativas \u2013 4,0 Atividade pr\u00e1tica supervisionada (APS) \u2013 1,0 2\u00ba Bimestre Avalia\u00e7\u00e3o Segmentada \u2013 2,0 Trabalho \u2013 2,0 pontos Prova \u2013 2,0 pontos Atividades avaliativas \u2013 3,0 Atividade pr\u00e1tica supervisionada \u2013 1,0","title":"Crit\u00e9rios para aprova\u00e7\u00e3o"},{"location":"aula01/","text":"JavaScript/ECMAScript JavaScript foi inventado por Brendan Eich em 1995. Foi desenvolvido para Netscape 2 e tornou-se o padr\u00e3o ECMA-262 em 1997. Depois que a Netscape entregou o JavaScript para a ECMA, a funda\u00e7\u00e3o Mozilla continuou a desenvolver JavaScript para o navegador Firefox. A \u00faltima vers\u00e3o do Mozilla foi 1.8.5. (Id\u00eantico ao ES5). O Internet Explorer (IE4) foi o primeiro navegador a oferecer suporte ao ECMA-262 Edi\u00e7\u00e3o 1 (ES1). O Comit\u00ea T\u00e9cnico da ECMA 39 Em 1996, Netscape e Brendan Eich levaram JavaScript para a organiza\u00e7\u00e3o de padr\u00f5es internacionais ECMA, e um comit\u00ea t\u00e9cnico (TC39) foi criado para desenvolver a linguagem. ECMA-262 Edi\u00e7\u00e3o 1 foi lan\u00e7ada em junho de 1997. De ES4 a ES6 O comit\u00ea TC39 se reuniu em Oslo em 2008, para trabalhar com o ECMAScript 4 ap\u00f3s algumas mudan\u00e7as o ECMAScript 4 foi renomeado para ES5 O ES5 deve ser uma atualiza\u00e7\u00e3o incremental do ECMAScript 3. Os recursos do ECMAScript 4 devem ser adquiridos em vers\u00f5es posteriores. O TC39 deve desenvolver uma nova vers\u00e3o principal, maior em escopo que o ES5. ES5 foi um grande sucesso. Foi lan\u00e7ado em 2009 e todos os principais navegadores (incluindo o Internet Explorer) eram totalmente compat\u00edveis em julho de 2013: Chrome 23 IE10 / Edge Firefox 21 Safari 6 Opera 15 Nov 2012 Sep 2012 May 2013 Jul 2012 Jul 2013 ES6 tamb\u00e9m foi um grande sucesso. Foi lan\u00e7ado em 2015 e todos os principais navegadores estavam em total conformidade em mar\u00e7o de 2017: Chrome 51 Edge 14 Firefox 52 Safari 10 Opera 38 May 2016 Aug 2016 Mar 2017 Sep 2016 Jun 2016 Aplica\u00e7\u00f5es Front end Manipula\u00e7\u00e3o do DOM, comunica\u00e7\u00e3o ass\u00edncrona com o back end e mais Back end Comunica\u00e7\u00e3o com banco de dados, manipula\u00e7\u00e3o de arquivos e mais (Node) Jogos Geralmente se aproveitando de benef\u00edcios do HTML5 Sintaxe B\u00e1sica Exemplo 1 1 2 3 4 5 6 7 8 const nome = \"Jo\u00e3ozinho\" ; function somar ( a , b ) { return a + b ; } somar ( 2 , 4 ); // resultado 6 Exemplo 2 1 2 3 4 5 const btn = document . querySelector ( '.btn' ); btn . addEventListener ( 'click' , function () { btn . classList . add ( 'ativo' ); }); Vari\u00e1veis Antes de Iniciarmos Criar um documento HTML (index.html) Criar um documento JavaScript (script.js) Linkar o script ao html < script src = \"script.js\" >< /script> Vari\u00e1veis Respons\u00e1veis por guardar dados na mem\u00f3ria. Inicia com a palavra var , let ou const Vari\u00e1veis 1 2 3 var nome = 'Jo\u00e3ozinho' ; let idade = 28 ; const frequente = true ; Evitam repeti\u00e7\u00f5es DRY (Don't repeat yourself) 1 2 3 var preco = 20 ; var totalComprado = 5 ; var precoTotal = preco * totalComprado ; Sintaxe Palavra chave var seguida do nome, sinal de igual e o valor. exemplo 1 2 3 var nome = 'Jo\u00e3ozinho' ; var idade = 28 ; var frequente = true ; V\u00edrgula Utilize a v\u00edrgula para criar mais de uma vari\u00e1vel, sem repetir a palavra chave var. V\u00edrgula 1 2 var nome = 'Jo\u00e3ozinho' , idade = 28 , frequente = true ; Sem valor Pode declarar ela e n\u00e3o atribuir valor inicialmente. Sem valor 1 2 var precoAplicativo ; // retorna undefined Nome Os nomes podem iniciar com $ , _ , ou letras . Podem conter n\u00fameros mas n\u00e3o iniciar com eles Case sensitive nome \u00e9 diferente de Nome N\u00e3o utilizar palavras reservadas :bulb: https://www.w3schools.com/js/js_reserved.asp Camel case \u00c9 comum nomearmos assim: abrirModal Nome 1 2 3 4 5 6 7 // Inv\u00e1lido var \u00a7nome; var function; var 1 frequente ; // V\u00e1lido var $selecionar ; var _nome ; var frequenteNoExterior ; Erro ao tentar utilizar uma vari\u00e1vel que n\u00e3o foi declarada. Erro declara\u00e7\u00e3o 1 2 console . log ( nome ); // retorna nome is not defined Hoisting A declara\u00e7\u00e3o das vari\u00e1veis s\u00e3o movidas para cima do c\u00f3digo, por\u00e9m o valor atribu\u00eddo n\u00e3o \u00e9 movido. Hoisting 1 2 3 4 5 6 console . log ( nome ); var nome = 'Jo\u00e3ozinho' ; // Retorna undefined var profissao = 'Programador' ; console . log ( profissao ); // Retorna Programador Mudar o valor atribu\u00eddo \u00c9 poss\u00edvel mudar os valores atribu\u00eddos a vari\u00e1veis declaradas com var e let . Por\u00e9m n\u00e3o \u00e9 poss\u00edvel modicar valores das declaradas com const Valor do atributo 1 2 3 4 5 6 var idade = 28 ; idade = 29 ; let preco = 50 ; preco = 25 ; const frequente = true ; frequente = false ; // Retorna um erro Exerc\u00edcios Declarar uma vari\u00e1vel e atribuir o seu nome Declarar uma vari\u00e1vel e atribuir sua idade Declarar uma vari\u00e1vel e atribuir sua comida favorita Declarar 3 vari\u00e1veis sem valores","title":"T\u00f3pico 01"},{"location":"aula01/#javascriptecmascript","text":"JavaScript foi inventado por Brendan Eich em 1995. Foi desenvolvido para Netscape 2 e tornou-se o padr\u00e3o ECMA-262 em 1997. Depois que a Netscape entregou o JavaScript para a ECMA, a funda\u00e7\u00e3o Mozilla continuou a desenvolver JavaScript para o navegador Firefox. A \u00faltima vers\u00e3o do Mozilla foi 1.8.5. (Id\u00eantico ao ES5). O Internet Explorer (IE4) foi o primeiro navegador a oferecer suporte ao ECMA-262 Edi\u00e7\u00e3o 1 (ES1).","title":"JavaScript/ECMAScript"},{"location":"aula01/#o-comite-tecnico-da-ecma-39","text":"Em 1996, Netscape e Brendan Eich levaram JavaScript para a organiza\u00e7\u00e3o de padr\u00f5es internacionais ECMA, e um comit\u00ea t\u00e9cnico (TC39) foi criado para desenvolver a linguagem. ECMA-262 Edi\u00e7\u00e3o 1 foi lan\u00e7ada em junho de 1997.","title":"O Comit\u00ea T\u00e9cnico da ECMA 39"},{"location":"aula01/#de-es4-a-es6","text":"O comit\u00ea TC39 se reuniu em Oslo em 2008, para trabalhar com o ECMAScript 4 ap\u00f3s algumas mudan\u00e7as o ECMAScript 4 foi renomeado para ES5 O ES5 deve ser uma atualiza\u00e7\u00e3o incremental do ECMAScript 3. Os recursos do ECMAScript 4 devem ser adquiridos em vers\u00f5es posteriores. O TC39 deve desenvolver uma nova vers\u00e3o principal, maior em escopo que o ES5. ES5 foi um grande sucesso. Foi lan\u00e7ado em 2009 e todos os principais navegadores (incluindo o Internet Explorer) eram totalmente compat\u00edveis em julho de 2013: Chrome 23 IE10 / Edge Firefox 21 Safari 6 Opera 15 Nov 2012 Sep 2012 May 2013 Jul 2012 Jul 2013 ES6 tamb\u00e9m foi um grande sucesso. Foi lan\u00e7ado em 2015 e todos os principais navegadores estavam em total conformidade em mar\u00e7o de 2017: Chrome 51 Edge 14 Firefox 52 Safari 10 Opera 38 May 2016 Aug 2016 Mar 2017 Sep 2016 Jun 2016","title":"De ES4 a ES6"},{"location":"aula01/#aplicacoes","text":"Front end Manipula\u00e7\u00e3o do DOM, comunica\u00e7\u00e3o ass\u00edncrona com o back end e mais Back end Comunica\u00e7\u00e3o com banco de dados, manipula\u00e7\u00e3o de arquivos e mais (Node) Jogos Geralmente se aproveitando de benef\u00edcios do HTML5","title":"Aplica\u00e7\u00f5es"},{"location":"aula01/#sintaxe-basica","text":"Exemplo 1 1 2 3 4 5 6 7 8 const nome = \"Jo\u00e3ozinho\" ; function somar ( a , b ) { return a + b ; } somar ( 2 , 4 ); // resultado 6 Exemplo 2 1 2 3 4 5 const btn = document . querySelector ( '.btn' ); btn . addEventListener ( 'click' , function () { btn . classList . add ( 'ativo' ); });","title":"Sintaxe B\u00e1sica"},{"location":"aula01/#variaveis","text":"Antes de Iniciarmos Criar um documento HTML (index.html) Criar um documento JavaScript (script.js) Linkar o script ao html < script src = \"script.js\" >< /script> Vari\u00e1veis Respons\u00e1veis por guardar dados na mem\u00f3ria. Inicia com a palavra var , let ou const Vari\u00e1veis 1 2 3 var nome = 'Jo\u00e3ozinho' ; let idade = 28 ; const frequente = true ; Evitam repeti\u00e7\u00f5es DRY (Don't repeat yourself) 1 2 3 var preco = 20 ; var totalComprado = 5 ; var precoTotal = preco * totalComprado ;","title":"Vari\u00e1veis"},{"location":"aula01/#sintaxe","text":"Palavra chave var seguida do nome, sinal de igual e o valor. exemplo 1 2 3 var nome = 'Jo\u00e3ozinho' ; var idade = 28 ; var frequente = true ; V\u00edrgula Utilize a v\u00edrgula para criar mais de uma vari\u00e1vel, sem repetir a palavra chave var. V\u00edrgula 1 2 var nome = 'Jo\u00e3ozinho' , idade = 28 , frequente = true ; Sem valor Pode declarar ela e n\u00e3o atribuir valor inicialmente. Sem valor 1 2 var precoAplicativo ; // retorna undefined Nome Os nomes podem iniciar com $ , _ , ou letras . Podem conter n\u00fameros mas n\u00e3o iniciar com eles Case sensitive nome \u00e9 diferente de Nome N\u00e3o utilizar palavras reservadas :bulb: https://www.w3schools.com/js/js_reserved.asp Camel case \u00c9 comum nomearmos assim: abrirModal Nome 1 2 3 4 5 6 7 // Inv\u00e1lido var \u00a7nome; var function; var 1 frequente ; // V\u00e1lido var $selecionar ; var _nome ; var frequenteNoExterior ; Erro ao tentar utilizar uma vari\u00e1vel que n\u00e3o foi declarada. Erro declara\u00e7\u00e3o 1 2 console . log ( nome ); // retorna nome is not defined","title":"Sintaxe"},{"location":"aula01/#hoisting","text":"A declara\u00e7\u00e3o das vari\u00e1veis s\u00e3o movidas para cima do c\u00f3digo, por\u00e9m o valor atribu\u00eddo n\u00e3o \u00e9 movido. Hoisting 1 2 3 4 5 6 console . log ( nome ); var nome = 'Jo\u00e3ozinho' ; // Retorna undefined var profissao = 'Programador' ; console . log ( profissao ); // Retorna Programador Mudar o valor atribu\u00eddo \u00c9 poss\u00edvel mudar os valores atribu\u00eddos a vari\u00e1veis declaradas com var e let . Por\u00e9m n\u00e3o \u00e9 poss\u00edvel modicar valores das declaradas com const Valor do atributo 1 2 3 4 5 6 var idade = 28 ; idade = 29 ; let preco = 50 ; preco = 25 ; const frequente = true ; frequente = false ; // Retorna um erro Exerc\u00edcios Declarar uma vari\u00e1vel e atribuir o seu nome Declarar uma vari\u00e1vel e atribuir sua idade Declarar uma vari\u00e1vel e atribuir sua comida favorita Declarar 3 vari\u00e1veis sem valores","title":"Hoisting"},{"location":"aula02/","text":"Tipos de Dados 7 tipos de Dados Tipos de dados 1 2 3 4 5 6 var nome = 'Jo\u00e3ozinho' ; //String var idade = 28 ; // Number var frequente = true ; // Boolean var time ; // Undefined var comida = null ; // Null var simbolo = Symbol () // Symbol var novoObjeto = {} // Object Verificar tipo de Dado Verificar tipo 1 2 3 var nome = 'Jo\u00e3ozinho' ; console . log ( typeof nome ); // retorna string String Concatenar strings 1 2 3 var nome = 'Jo\u00e3ozinho' ; var sobrenome = 'Silva' ; var nomeCompleto = nome + ' ' + sobrenome ; Voc\u00ea pode concatenar n\u00fameros com strings, o resultado final \u00e9 sempre uma string. 1 2 var pontos = 10 ; var frase = 'O aluno fez ' + pontos + ' pontos' ; Aspas Duplas e Simples Aspas 1 2 3 4 5 'JavaScript \u00e9 \"super\" f\u00e1cil' ; \"JavaScript \u00e9 'super' f\u00e1cil\" ; \"JavaScript \u00e9 \\\"super\\\" f\u00e1cil\" ; `JavaScript \u00e9 \"super\" f\u00e1cil\"` ; \"JavaScript \u00e9 \" super \" f\u00e1cil\" ; // Inv\u00e1lido Template String Template string 1 2 3 var pontos = 10 ; var frase1 = 'O aluno fez ' + pontos + ' pontos' ; var frase2 = `O aluno fez ${ pontos } pontos` ; // Utilizando Template :man_raising_hand: Voc\u00ea deve passar express\u00f5es vari\u00e1veis dentro de $ {} Exerc\u00edcios Declare uma vari\u00e1vel contendo uma string Declare uma vari\u00e1vel contendo um n\u00famero dentro de uma string Declare uma vari\u00e1vel com a sua idade Declare outra vari\u00e1vel para contar a frase: Meu nome \u00e9 SEU NOME e minha idade \u00e9 SUA IDADE Declare outras duas vari\u00e1veis, uma com seu sobrenome e com seu nome exiba as mesmas juntas Coloque a seguinte frase em uma vari\u00e1vel: It's study time Verifique o tipo da vari\u00e1vel que cont\u00e9m o seu nome N\u00fameros e Operadores N\u00fameros 1 2 3 4 var idade = 28 ; var pontos = 100 ; var pi = 3.14 ; // ponto para decimal var exp = 2e10 ; // 20000000000 Precis\u00e3o para at\u00e9 15 d\u00edgitos Operadores Aritm\u00e9ticos 1 2 3 4 5 6 7 var soma = 100 + 50 ; // 150 var subtracao = 100 - 50 ; // 50 var multiplicacao = 100 * 2 ; // 200 var divisao = 100 / 2 ; // 50 var expoente = 2 ** 4 ; // 16 var modulo = 14 % 5 ; // 4 code Operadores Aritm\u00e9ticos (Strings) 1 2 3 4 var soma = '100' + 50 ; // 10050 (concatena\u00e7\u00e3o) var subtracao = '100' - 50 ; // 50 (convers\u00e3o autom\u00e1tica) var multiplicacao = '100' * '2' ; // 200 (convers\u00e3o autom\u00e1tica) var divisao = 'Comprei 10' / 2 ; // NaN (Not a Number) \u00c9 poss\u00edvel verificar se uma vari\u00e1vel \u00e9 NaN ou n\u00e3o com a fun\u00e7\u00e3o isNaN() NaN = Not a Number 1 2 3 4 var numero = 80 ; var unidade = 'kg' ; var peso = numero + unidade ; // '80kg' var pesoPorDois = peso / 2 // NaN (Not a Number) A ordem importa Segue a ordem aritm\u00e9tica: come\u00e7a por multiplica\u00e7\u00e3o e divis\u00e3o, depois por soma e subtra\u00e7\u00e3o. Order 1 2 3 4 var total1 = 20 + 5 * 2 ; // 30 var total2 = ( 20 + 5 ) * 2 ; // 50 var total3 = 20 / 2 * 5 ; // 50 var total4 = 10 + 10 * 2 + 20 / 2 ; // 40 Os par\u00eanteses mudam as preced\u00eancias dos operadores. Operadores Aritm\u00e9ticos Un\u00e1rios 1 2 3 4 5 6 7 var incremento = 5 ; console . log ( incremento ++ ); // 5 (p\u00f3s incremento) console . log ( incremento ); // 6 var incremento2 = 5 ; console . log ( ++ incremento2 ); // 6 (pr\u00e9-incremento) console . log ( incremento2 ); // 6 O mesmo se aplica o decremento -- x O + e - tenta transformar o valor seguinte em n\u00famero 1 2 3 4 5 6 7 8 9 10 11 var frase = 'Isso \u00e9 um teste' ; + frase ; // NaN - frase ; // NaN var idade = '28' ; + idade ; // 28 (n\u00famero) (convers\u00e3o autom\u00e1tica) - idade ; // -28 (n\u00famero) (convers\u00e3o autom\u00e1tica) console . log ( + idade + 5 ); // 33 var frequente = true ; console . log ( + frequente ); // 1 O - antes de um n\u00famero torna ele negativo Guia completo de operadores https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators Boolean e Condicionais Existem dois valores booleanos false ou true . Bool 1 2 var possuiGraduacao = true ; var possuiDoutorado = false ; Condicionais If e Else Verificar se uma express\u00e3o \u00e9 verdadeira com if , caso contr\u00e1rio o else ser\u00e1 ativado. Condicionais 1 2 3 4 5 6 7 var possuiGraduacao = true ; if ( possuiGraduacao ) { console . log ( 'Possui gradua\u00e7\u00e3o' ); } else { console . log ( 'N\u00e3o possui gradua\u00e7\u00e3o' ); } O que acontece no c\u00f3digo anterior? retorna Possui Gradua\u00e7\u00e3o e n\u00e3o executa o else O valor dentro dos par\u00eanteses sempre ser\u00e1 avaliado em true ou false . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var possuiGraduacao = true ; var possuiDoutorado = false ; if ( possuiDoutorado ) { console . log ( 'Possui gradua\u00e7\u00e3o e doutorado' ); } else if ( possuiGraduacao ) { console . log ( 'Possui gradua\u00e7\u00e3o, mas n\u00e3o possui doutorado' ); } else { console . log ( 'N\u00e3o possui gradua\u00e7\u00e3o' ); } O que acontece no c\u00f3digo anterior? retorna Possui Gradua\u00e7\u00e3o, mas n\u00e3o possui doutorado Se o if n\u00e3o for verdadeiro, ele testa o else if Switch Switch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var corFavorita = 'Azul' ; switch ( corFavorita ) { case 'Azul' : console . log ( 'Olhe para o c\u00e9u.' ); break ; case 'Vermelho' : console . log ( 'Olhe para rosas.' ); break ; case 'Amarelo' : console . log ( 'Olhe para o sol.' ); break ; default : console . log ( 'Feche os olhos' ); } False / True Existem valores que retornam true e outros que retornam false quando verificados em uma express\u00e3o booleana. False 1 2 3 4 5 6 if ( false ) if ( 0 ) // ou -0 if ( NaN ) if ( null ) if ( undefined ) if ( '' ) // ou \"\" ou `` True 1 2 3 4 5 6 if ( true ) if ( 1 ) if ( ' ' ) if ( 'batinha' ) if ( - 5 ) if ({}) Operador L\u00f3gico de Nega\u00e7\u00e3o ! O operador ! , nega uma opera\u00e7\u00e3o booleana. Ou seja, ! true \u00e9 igual a false Not 1 2 3 4 5 6 if ( ! true ) // false if ( ! 1 ) // false if ( ! '' ) // true if ( ! undefined ) // true if ( !! ' ' ) // true if ( !! '' ) // false Operadores de compara\u00e7\u00e3o Compara\u00e7\u00e3o 1 2 3 4 5 10 > 5 ; // true 5 > 10 ; // false 20 < 10 ; // false 10 <= 10 // true 10 >= 11 // false O == faz uma compara\u00e7\u00e3o n\u00e3o t\u00e3o estrita e o === faz uma compara\u00e7\u00e3o estrita, ou seja, o tipo de dado deve ser o mesmo quando usamos === 1 2 3 4 5 6 7 10 == '10' ; // true 10 == 10 ; // true 10 === '10' ; // false 10 === 10 // true 10 != 15 // true 10 != '10' // false 10 !== '10' // true Operadores L\u00f3gicos && && Compara se uma express\u00e3o E a outra \u00e9 verdadeira AND 1 2 3 4 5 6 7 true && true ; // true true && false ; // false false && true ; // false 'Gato' && 'C\u00e3o' ; // 'C\u00e3o' ( 5 - 5 ) && ( 5 + 5 ); // 0 'Gato' && false ; // false ( 5 >= 5 ) && ( 3 < 6 ); // true Se ambos os valores forem true ele ir\u00e1 retornar o \u00faltimo valor verificado Se algum valor for false ele ir\u00e1 retornar o mesmo e n\u00e3o ir\u00e1 continuar a verifica\u00e7\u00e3o Operadores L\u00f3gicos || || Compara se uma express\u00e3o OU outra \u00e9 verdadeira OR 1 2 3 4 5 6 7 true || true ; // true true || false ; // true false || true ; // true 'Gato' || 'C\u00e3o' ; // 'Gato' ( 5 - 5 ) || ( 5 + 5 ); // 10 'Gato' || false ; // Gato ( 5 >= 5 ) || ( 3 < 6 ); // true Retorna o primeiro valor true que encontrar Exerc\u00edcios Verifique se a sua idade \u00e9 maior do que a de algum parente Dependendo do resultado coloque no console '\u00c9 maior', '\u00c9 igual Qual valor \u00e9 retornado na seguinte express\u00e3o? var expressao = ( 5 - 2 ) && ( 5 - ' ' ) && ( 5 - 2 ); Verifique se as seguintes vari\u00e1veis s\u00e3o True ou False 1 2 3 4 5 var nome = 'Jo\u00e3o' ; var idade = 28 ; var possuiDoutorado = false ; var empregoFuturo ; var dinheiroNaConta = 0 ; Compare o total de habitantes do Brasil com China (valor em mi) var brasil = 207 ; var china = 1340 ; O que ir\u00e1 aparecer no console? 1 2 3 4 5 if (( 'Gato' === 'gato' ) && ( 5 > 2 )) { console . log ( 'Verdadeiro' ); } else { console . log ( 'Falso' ); } O que ir\u00e1 aparecer no console? 1 2 3 4 5 if (( 'Gato' === 'gato' ) || ( 5 > 2 )) { console . log ( 'Gato' && 'C\u00e3o' ); } else { console . log ( 'Falso' ); } Coment\u00e1rios Comentarios 1 2 3 4 5 6 7 8 // Coment\u00e1rio de uma linha /* Coment\u00e1rio com diversas linhas */ // var nome = 'Jo\u00e3ozinho'; Operadores de Atribui\u00e7\u00e3o Podem funcionar como formas abreviadas atribui\u00e7\u00e3o 1 2 3 4 5 6 7 8 var x = 5 ; var y = 10 ; x += y ; // x = x + y (15) x -= y ; // x = x - y (-5) x *= y ; // x = x * y (50) x /= y ; // x = x / y (0.5) x %= y ; // x = x % y (0) x **= y ; // x = x ** y (9765625) Operador Tern\u00e1rio Abrevia\u00e7\u00e3o de condicionais com if e else tern\u00e1rio 1 2 3 4 var frequencia = 80 ; var passou = ( frequencia >= 75 ) ? 'Passsou' : 'N\u00e3o passou' ; console . log ( passou ) // Passou // condi\u00e7\u00e3o ? true : false If Abreviado N\u00e3o \u00e9 necess\u00e1rio abrir e fechar as chaves {} quando retornamos apenas uma linha de c\u00f3digo id 1 2 3 4 5 6 7 8 var frequente = true ; if ( frequente ) console . log ( 'Possui faculdade' ); else console . log ( 'N\u00e3o possui faculdade' ); // ou if ( frequente ) console . log ( 'Possui faculdade' ); else console . log ( 'N\u00e3o possui faculdade' ); Exerc\u00edcio Some 500 ao valor de scroll abaixo, atribuindo o novo valor a scroll var scroll = 1000 ; Atribua true para a vari\u00e1vel darCredito, caso o cliente possua carro e casa e false caso o contr\u00e1rio. var possuiCarro = true ; var possuiCasa = true ; var darCredito ;","title":"T\u00f3pico 02"},{"location":"aula02/#tipos-de-dados","text":"7 tipos de Dados Tipos de dados 1 2 3 4 5 6 var nome = 'Jo\u00e3ozinho' ; //String var idade = 28 ; // Number var frequente = true ; // Boolean var time ; // Undefined var comida = null ; // Null var simbolo = Symbol () // Symbol var novoObjeto = {} // Object Verificar tipo de Dado Verificar tipo 1 2 3 var nome = 'Jo\u00e3ozinho' ; console . log ( typeof nome ); // retorna string","title":"Tipos de Dados"},{"location":"aula02/#string","text":"Concatenar strings 1 2 3 var nome = 'Jo\u00e3ozinho' ; var sobrenome = 'Silva' ; var nomeCompleto = nome + ' ' + sobrenome ; Voc\u00ea pode concatenar n\u00fameros com strings, o resultado final \u00e9 sempre uma string. 1 2 var pontos = 10 ; var frase = 'O aluno fez ' + pontos + ' pontos' ; Aspas Duplas e Simples Aspas 1 2 3 4 5 'JavaScript \u00e9 \"super\" f\u00e1cil' ; \"JavaScript \u00e9 'super' f\u00e1cil\" ; \"JavaScript \u00e9 \\\"super\\\" f\u00e1cil\" ; `JavaScript \u00e9 \"super\" f\u00e1cil\"` ; \"JavaScript \u00e9 \" super \" f\u00e1cil\" ; // Inv\u00e1lido Template String Template string 1 2 3 var pontos = 10 ; var frase1 = 'O aluno fez ' + pontos + ' pontos' ; var frase2 = `O aluno fez ${ pontos } pontos` ; // Utilizando Template :man_raising_hand: Voc\u00ea deve passar express\u00f5es vari\u00e1veis dentro de $ {} Exerc\u00edcios Declare uma vari\u00e1vel contendo uma string Declare uma vari\u00e1vel contendo um n\u00famero dentro de uma string Declare uma vari\u00e1vel com a sua idade Declare outra vari\u00e1vel para contar a frase: Meu nome \u00e9 SEU NOME e minha idade \u00e9 SUA IDADE Declare outras duas vari\u00e1veis, uma com seu sobrenome e com seu nome exiba as mesmas juntas Coloque a seguinte frase em uma vari\u00e1vel: It's study time Verifique o tipo da vari\u00e1vel que cont\u00e9m o seu nome","title":"String"},{"location":"aula02/#numeros-e-operadores","text":"N\u00fameros 1 2 3 4 var idade = 28 ; var pontos = 100 ; var pi = 3.14 ; // ponto para decimal var exp = 2e10 ; // 20000000000 Precis\u00e3o para at\u00e9 15 d\u00edgitos Operadores Aritm\u00e9ticos 1 2 3 4 5 6 7 var soma = 100 + 50 ; // 150 var subtracao = 100 - 50 ; // 50 var multiplicacao = 100 * 2 ; // 200 var divisao = 100 / 2 ; // 50 var expoente = 2 ** 4 ; // 16 var modulo = 14 % 5 ; // 4 code Operadores Aritm\u00e9ticos (Strings) 1 2 3 4 var soma = '100' + 50 ; // 10050 (concatena\u00e7\u00e3o) var subtracao = '100' - 50 ; // 50 (convers\u00e3o autom\u00e1tica) var multiplicacao = '100' * '2' ; // 200 (convers\u00e3o autom\u00e1tica) var divisao = 'Comprei 10' / 2 ; // NaN (Not a Number) \u00c9 poss\u00edvel verificar se uma vari\u00e1vel \u00e9 NaN ou n\u00e3o com a fun\u00e7\u00e3o isNaN() NaN = Not a Number 1 2 3 4 var numero = 80 ; var unidade = 'kg' ; var peso = numero + unidade ; // '80kg' var pesoPorDois = peso / 2 // NaN (Not a Number)","title":"N\u00fameros e Operadores"},{"location":"aula02/#a-ordem-importa","text":"Segue a ordem aritm\u00e9tica: come\u00e7a por multiplica\u00e7\u00e3o e divis\u00e3o, depois por soma e subtra\u00e7\u00e3o. Order 1 2 3 4 var total1 = 20 + 5 * 2 ; // 30 var total2 = ( 20 + 5 ) * 2 ; // 50 var total3 = 20 / 2 * 5 ; // 50 var total4 = 10 + 10 * 2 + 20 / 2 ; // 40 Os par\u00eanteses mudam as preced\u00eancias dos operadores. Operadores Aritm\u00e9ticos Un\u00e1rios 1 2 3 4 5 6 7 var incremento = 5 ; console . log ( incremento ++ ); // 5 (p\u00f3s incremento) console . log ( incremento ); // 6 var incremento2 = 5 ; console . log ( ++ incremento2 ); // 6 (pr\u00e9-incremento) console . log ( incremento2 ); // 6 O mesmo se aplica o decremento -- x O + e - tenta transformar o valor seguinte em n\u00famero 1 2 3 4 5 6 7 8 9 10 11 var frase = 'Isso \u00e9 um teste' ; + frase ; // NaN - frase ; // NaN var idade = '28' ; + idade ; // 28 (n\u00famero) (convers\u00e3o autom\u00e1tica) - idade ; // -28 (n\u00famero) (convers\u00e3o autom\u00e1tica) console . log ( + idade + 5 ); // 33 var frequente = true ; console . log ( + frequente ); // 1 O - antes de um n\u00famero torna ele negativo Guia completo de operadores https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Expressions_and_Operators","title":"A ordem importa"},{"location":"aula02/#boolean-e-condicionais","text":"Existem dois valores booleanos false ou true . Bool 1 2 var possuiGraduacao = true ; var possuiDoutorado = false ;","title":"Boolean e Condicionais"},{"location":"aula02/#condicionais-if-e-else","text":"Verificar se uma express\u00e3o \u00e9 verdadeira com if , caso contr\u00e1rio o else ser\u00e1 ativado. Condicionais 1 2 3 4 5 6 7 var possuiGraduacao = true ; if ( possuiGraduacao ) { console . log ( 'Possui gradua\u00e7\u00e3o' ); } else { console . log ( 'N\u00e3o possui gradua\u00e7\u00e3o' ); } O que acontece no c\u00f3digo anterior? retorna Possui Gradua\u00e7\u00e3o e n\u00e3o executa o else O valor dentro dos par\u00eanteses sempre ser\u00e1 avaliado em true ou false . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 var possuiGraduacao = true ; var possuiDoutorado = false ; if ( possuiDoutorado ) { console . log ( 'Possui gradua\u00e7\u00e3o e doutorado' ); } else if ( possuiGraduacao ) { console . log ( 'Possui gradua\u00e7\u00e3o, mas n\u00e3o possui doutorado' ); } else { console . log ( 'N\u00e3o possui gradua\u00e7\u00e3o' ); } O que acontece no c\u00f3digo anterior? retorna Possui Gradua\u00e7\u00e3o, mas n\u00e3o possui doutorado Se o if n\u00e3o for verdadeiro, ele testa o else if","title":"Condicionais If e Else"},{"location":"aula02/#switch","text":"Switch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var corFavorita = 'Azul' ; switch ( corFavorita ) { case 'Azul' : console . log ( 'Olhe para o c\u00e9u.' ); break ; case 'Vermelho' : console . log ( 'Olhe para rosas.' ); break ; case 'Amarelo' : console . log ( 'Olhe para o sol.' ); break ; default : console . log ( 'Feche os olhos' ); }","title":"Switch"},{"location":"aula02/#false-true","text":"Existem valores que retornam true e outros que retornam false quando verificados em uma express\u00e3o booleana. False 1 2 3 4 5 6 if ( false ) if ( 0 ) // ou -0 if ( NaN ) if ( null ) if ( undefined ) if ( '' ) // ou \"\" ou `` True 1 2 3 4 5 6 if ( true ) if ( 1 ) if ( ' ' ) if ( 'batinha' ) if ( - 5 ) if ({})","title":"False / True"},{"location":"aula02/#operador-logico-de-negacao","text":"O operador ! , nega uma opera\u00e7\u00e3o booleana. Ou seja, ! true \u00e9 igual a false Not 1 2 3 4 5 6 if ( ! true ) // false if ( ! 1 ) // false if ( ! '' ) // true if ( ! undefined ) // true if ( !! ' ' ) // true if ( !! '' ) // false","title":"Operador L\u00f3gico de Nega\u00e7\u00e3o !"},{"location":"aula02/#operadores-de-comparacao","text":"Compara\u00e7\u00e3o 1 2 3 4 5 10 > 5 ; // true 5 > 10 ; // false 20 < 10 ; // false 10 <= 10 // true 10 >= 11 // false O == faz uma compara\u00e7\u00e3o n\u00e3o t\u00e3o estrita e o === faz uma compara\u00e7\u00e3o estrita, ou seja, o tipo de dado deve ser o mesmo quando usamos === 1 2 3 4 5 6 7 10 == '10' ; // true 10 == 10 ; // true 10 === '10' ; // false 10 === 10 // true 10 != 15 // true 10 != '10' // false 10 !== '10' // true","title":"Operadores de compara\u00e7\u00e3o"},{"location":"aula02/#operadores-logicos","text":"&& Compara se uma express\u00e3o E a outra \u00e9 verdadeira AND 1 2 3 4 5 6 7 true && true ; // true true && false ; // false false && true ; // false 'Gato' && 'C\u00e3o' ; // 'C\u00e3o' ( 5 - 5 ) && ( 5 + 5 ); // 0 'Gato' && false ; // false ( 5 >= 5 ) && ( 3 < 6 ); // true Se ambos os valores forem true ele ir\u00e1 retornar o \u00faltimo valor verificado Se algum valor for false ele ir\u00e1 retornar o mesmo e n\u00e3o ir\u00e1 continuar a verifica\u00e7\u00e3o","title":"Operadores L\u00f3gicos &amp;&amp;"},{"location":"aula02/#operadores-logicos_1","text":"|| Compara se uma express\u00e3o OU outra \u00e9 verdadeira OR 1 2 3 4 5 6 7 true || true ; // true true || false ; // true false || true ; // true 'Gato' || 'C\u00e3o' ; // 'Gato' ( 5 - 5 ) || ( 5 + 5 ); // 10 'Gato' || false ; // Gato ( 5 >= 5 ) || ( 3 < 6 ); // true Retorna o primeiro valor true que encontrar Exerc\u00edcios Verifique se a sua idade \u00e9 maior do que a de algum parente Dependendo do resultado coloque no console '\u00c9 maior', '\u00c9 igual Qual valor \u00e9 retornado na seguinte express\u00e3o? var expressao = ( 5 - 2 ) && ( 5 - ' ' ) && ( 5 - 2 ); Verifique se as seguintes vari\u00e1veis s\u00e3o True ou False 1 2 3 4 5 var nome = 'Jo\u00e3o' ; var idade = 28 ; var possuiDoutorado = false ; var empregoFuturo ; var dinheiroNaConta = 0 ; Compare o total de habitantes do Brasil com China (valor em mi) var brasil = 207 ; var china = 1340 ; O que ir\u00e1 aparecer no console? 1 2 3 4 5 if (( 'Gato' === 'gato' ) && ( 5 > 2 )) { console . log ( 'Verdadeiro' ); } else { console . log ( 'Falso' ); } O que ir\u00e1 aparecer no console? 1 2 3 4 5 if (( 'Gato' === 'gato' ) || ( 5 > 2 )) { console . log ( 'Gato' && 'C\u00e3o' ); } else { console . log ( 'Falso' ); }","title":"Operadores L\u00f3gicos ||"},{"location":"aula02/#comentarios","text":"Comentarios 1 2 3 4 5 6 7 8 // Coment\u00e1rio de uma linha /* Coment\u00e1rio com diversas linhas */ // var nome = 'Jo\u00e3ozinho';","title":"Coment\u00e1rios"},{"location":"aula02/#operadores-de-atribuicao","text":"Podem funcionar como formas abreviadas atribui\u00e7\u00e3o 1 2 3 4 5 6 7 8 var x = 5 ; var y = 10 ; x += y ; // x = x + y (15) x -= y ; // x = x - y (-5) x *= y ; // x = x * y (50) x /= y ; // x = x / y (0.5) x %= y ; // x = x % y (0) x **= y ; // x = x ** y (9765625)","title":"Operadores de Atribui\u00e7\u00e3o"},{"location":"aula02/#operador-ternario","text":"Abrevia\u00e7\u00e3o de condicionais com if e else tern\u00e1rio 1 2 3 4 var frequencia = 80 ; var passou = ( frequencia >= 75 ) ? 'Passsou' : 'N\u00e3o passou' ; console . log ( passou ) // Passou // condi\u00e7\u00e3o ? true : false","title":"Operador Tern\u00e1rio"},{"location":"aula02/#if-abreviado","text":"N\u00e3o \u00e9 necess\u00e1rio abrir e fechar as chaves {} quando retornamos apenas uma linha de c\u00f3digo id 1 2 3 4 5 6 7 8 var frequente = true ; if ( frequente ) console . log ( 'Possui faculdade' ); else console . log ( 'N\u00e3o possui faculdade' ); // ou if ( frequente ) console . log ( 'Possui faculdade' ); else console . log ( 'N\u00e3o possui faculdade' ); Exerc\u00edcio Some 500 ao valor de scroll abaixo, atribuindo o novo valor a scroll var scroll = 1000 ; Atribua true para a vari\u00e1vel darCredito, caso o cliente possua carro e casa e false caso o contr\u00e1rio. var possuiCarro = true ; var possuiCasa = true ; var darCredito ;","title":"If Abreviado"},{"location":"aula03/","text":"Fun\u00e7\u00f5es Bloco de c\u00f3digo que pode ser executado e reutilizado. Valores podem ser passados por uma fun\u00e7\u00e3o e a mesma retorna outro valor. Function 1 2 3 4 5 6 function areaQuadrado ( lado ) { return lado * lado ; } areaQuadrado ( 4 ) // 16 areaQuadrado ( 5 ) // 25 areaQuadrado ( 2 ) // 4 Fun\u00e7\u00e3o 1 2 3 4 5 function pi () { return 3.14 ; } var total = 5 * pi (); // 15.7 Par\u00e2metros e Argumentos Par\u00e2metros 1 2 3 4 5 6 7 8 // peso e altura s\u00e3o os par\u00e2metros function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); return imc ; } imc ( 80 , 1.80 ) // 80 e 1.80 s\u00e3o os argumentos imc ( 60 , 1.70 ) // 60 e 1.70 s\u00e3o os argumentos Os par\u00e2metros s\u00e3o separados por v\u00edrgulas Fazer a chamada usando par\u00eanteses executa a fun\u00e7\u00e3o: Executar fun\u00e7\u00e3o 1 2 3 4 5 6 7 8 9 10 function corFavorita ( cor ) { if ( cor === 'azul' ) { return 'Voc\u00ea gosta do c\u00e9u' ; } else if ( cor === 'verde' ) { return 'Voc\u00ea gosta de mato' ; } else { return 'Voc\u00ea n\u00e3o gosta de nada' ; } } corFavorita (); // retorna 'Voc\u00ea n\u00e3o gosta de nada' Argumentos podem ser fun\u00e7\u00f5es callbacks 1 2 3 addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }); A fun\u00e7\u00e3o possui dois argumentos: Primeiro \u00e9 a string 'click' Segundo \u00e9 uma fun\u00e7\u00e3o an\u00f4nima Chamadas de Callback , geralmente s\u00e3o fun\u00e7\u00f5es que ocorrem ap\u00f3s algum evento. Fun\u00e7\u00f5es an\u00f4nimas s\u00e3o aquelas em que o nome da fun\u00e7\u00e3o n\u00e3o \u00e9 definido, escritas como function () {} ou () => { } . Pode ou n\u00e3o retornar um valor 1 2 3 4 5 6 function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); } imc ( 80 , 1.80 ); // retorna o imc console . log ( imc ( 80 , 1.80 )); // retorna undefined Quando n\u00e3o definimos o return , ela ir\u00e1 retornar undefined . O c\u00f3digo interno da fun\u00e7\u00e3o \u00e9 executado normalmente, independente de existir valor de return ou n\u00e3o. Valores retornados 1 2 3 4 5 6 7 8 9 function terceiraIdade ( idade ) { if ( typeof idade !== 'number' ) { return 'Informe a sua idade!' ; } else if ( idade >= 60 ) { return true ; } else { return false ; } } Uma fun\u00e7\u00e3o pode retornar qualquer tipo de dado e at\u00e9 outras fun\u00e7\u00f5es. Cuidado, retornar diferentes tipos de dados na mesma fun\u00e7\u00e3o n\u00e3o \u00e9 uma boa pr\u00e1tica. Escopo Vari\u00e1veis e fun\u00e7\u00f5es definidas dentro de um bloco {} , n\u00e3o s\u00e3o vis\u00edveis fora dele. Escopo 1 2 3 4 5 6 function exerciciosResolvidos ( resolvidos ) { var totalExercicios = 10 ; return `Ainda faltam ${ totalExercicios - resolvidos } exerc\u00edcios para resolver` ; } console . log ( totalExercicios ); // erro, totalExercicios n\u00e3o definido Escopo L\u00e9xico Fun\u00e7\u00f5es conseguem acessar vari\u00e1veis que foram criadas no contexto pai Escopo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var profissao = 'Desenvolvedor' ; function dados () { var nome = 'Jo\u00e3ozinho' ; var idade = 28 ; function outrosDados () { var endereco = 'Rio de Janeiro' ; var idade = 29 ; return ` ${ nome } , ${ idade } , ${ endereco } , ${ profissao } ` ; } return outrosDados (); } dados (); // Retorna 'Jo\u00e3ozinho, 29, Rio de Janeiro, Desenvolvedor' outrosDados (); // retorna um erro Hoisting Antes de executar uma fun\u00e7\u00e3o, o JS 'move' todas as fun\u00e7\u00f5es declaradas para a mem\u00f3ria Hoisting 1 2 3 4 5 imc ( 80 , 1.80 ); // imc aparece no console function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); console . log ( imc ); } Exerc\u00edcio Crie uma fun\u00e7\u00e3o para verificar se um valor \u00e9 True Crie uma fun\u00e7\u00e3o matem\u00e1tica que retorne o per\u00edmetro de um quadrado. Lembrando: per\u00edmetro \u00e9 a soma dos quatro lados do quadrado Crie uma fun\u00e7\u00e3o que retorne o seu nome completo, ela deve possuir os par\u00e2metros: nome e sobrenome Crie uma fun\u00e7\u00e3o que verifica se um n\u00famero \u00e9 par Crie uma fun\u00e7\u00e3o que retorne o tipo de dado do argumento passado nela (typeof) addEventListener \u00e9 uma fun\u00e7\u00e3o nativa do JavaScript, o primeiro par\u00e2metro \u00e9 o evento que ocorre e o segundo o Callback. Utilize essa fun\u00e7\u00e3o para mostrar no console o seu nome completo quando o evento 'scroll' ocorrer. Crie uma fun\u00e7\u00e3o e utilize as estruturas de controle e repeti\u00e7\u00e3o que aprendemos para imprimir no console a letra da m\u00fasica Um elefante incomoda , utilize a fun\u00e7\u00e3o para verificar se o n\u00famero \u00e9 par neste desenvolvimento.","title":"T\u00f3pico 03"},{"location":"aula03/#funcoes","text":"Bloco de c\u00f3digo que pode ser executado e reutilizado. Valores podem ser passados por uma fun\u00e7\u00e3o e a mesma retorna outro valor. Function 1 2 3 4 5 6 function areaQuadrado ( lado ) { return lado * lado ; } areaQuadrado ( 4 ) // 16 areaQuadrado ( 5 ) // 25 areaQuadrado ( 2 ) // 4 Fun\u00e7\u00e3o 1 2 3 4 5 function pi () { return 3.14 ; } var total = 5 * pi (); // 15.7","title":"Fun\u00e7\u00f5es"},{"location":"aula03/#parametros-e-argumentos","text":"Par\u00e2metros 1 2 3 4 5 6 7 8 // peso e altura s\u00e3o os par\u00e2metros function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); return imc ; } imc ( 80 , 1.80 ) // 80 e 1.80 s\u00e3o os argumentos imc ( 60 , 1.70 ) // 60 e 1.70 s\u00e3o os argumentos Os par\u00e2metros s\u00e3o separados por v\u00edrgulas Fazer a chamada usando par\u00eanteses executa a fun\u00e7\u00e3o: Executar fun\u00e7\u00e3o 1 2 3 4 5 6 7 8 9 10 function corFavorita ( cor ) { if ( cor === 'azul' ) { return 'Voc\u00ea gosta do c\u00e9u' ; } else if ( cor === 'verde' ) { return 'Voc\u00ea gosta de mato' ; } else { return 'Voc\u00ea n\u00e3o gosta de nada' ; } } corFavorita (); // retorna 'Voc\u00ea n\u00e3o gosta de nada'","title":"Par\u00e2metros e Argumentos"},{"location":"aula03/#argumentos-podem-ser-funcoes","text":"callbacks 1 2 3 addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }); A fun\u00e7\u00e3o possui dois argumentos: Primeiro \u00e9 a string 'click' Segundo \u00e9 uma fun\u00e7\u00e3o an\u00f4nima Chamadas de Callback , geralmente s\u00e3o fun\u00e7\u00f5es que ocorrem ap\u00f3s algum evento. Fun\u00e7\u00f5es an\u00f4nimas s\u00e3o aquelas em que o nome da fun\u00e7\u00e3o n\u00e3o \u00e9 definido, escritas como function () {} ou () => { } . Pode ou n\u00e3o retornar um valor 1 2 3 4 5 6 function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); } imc ( 80 , 1.80 ); // retorna o imc console . log ( imc ( 80 , 1.80 )); // retorna undefined Quando n\u00e3o definimos o return , ela ir\u00e1 retornar undefined . O c\u00f3digo interno da fun\u00e7\u00e3o \u00e9 executado normalmente, independente de existir valor de return ou n\u00e3o. Valores retornados 1 2 3 4 5 6 7 8 9 function terceiraIdade ( idade ) { if ( typeof idade !== 'number' ) { return 'Informe a sua idade!' ; } else if ( idade >= 60 ) { return true ; } else { return false ; } } Uma fun\u00e7\u00e3o pode retornar qualquer tipo de dado e at\u00e9 outras fun\u00e7\u00f5es. Cuidado, retornar diferentes tipos de dados na mesma fun\u00e7\u00e3o n\u00e3o \u00e9 uma boa pr\u00e1tica.","title":"Argumentos podem ser fun\u00e7\u00f5es"},{"location":"aula03/#escopo","text":"Vari\u00e1veis e fun\u00e7\u00f5es definidas dentro de um bloco {} , n\u00e3o s\u00e3o vis\u00edveis fora dele. Escopo 1 2 3 4 5 6 function exerciciosResolvidos ( resolvidos ) { var totalExercicios = 10 ; return `Ainda faltam ${ totalExercicios - resolvidos } exerc\u00edcios para resolver` ; } console . log ( totalExercicios ); // erro, totalExercicios n\u00e3o definido","title":"Escopo"},{"location":"aula03/#escopo-lexico","text":"Fun\u00e7\u00f5es conseguem acessar vari\u00e1veis que foram criadas no contexto pai Escopo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var profissao = 'Desenvolvedor' ; function dados () { var nome = 'Jo\u00e3ozinho' ; var idade = 28 ; function outrosDados () { var endereco = 'Rio de Janeiro' ; var idade = 29 ; return ` ${ nome } , ${ idade } , ${ endereco } , ${ profissao } ` ; } return outrosDados (); } dados (); // Retorna 'Jo\u00e3ozinho, 29, Rio de Janeiro, Desenvolvedor' outrosDados (); // retorna um erro","title":"Escopo L\u00e9xico"},{"location":"aula03/#hoisting","text":"Antes de executar uma fun\u00e7\u00e3o, o JS 'move' todas as fun\u00e7\u00f5es declaradas para a mem\u00f3ria Hoisting 1 2 3 4 5 imc ( 80 , 1.80 ); // imc aparece no console function imc ( peso , altura ) { const imc = peso / ( altura ** 2 ); console . log ( imc ); } Exerc\u00edcio Crie uma fun\u00e7\u00e3o para verificar se um valor \u00e9 True Crie uma fun\u00e7\u00e3o matem\u00e1tica que retorne o per\u00edmetro de um quadrado. Lembrando: per\u00edmetro \u00e9 a soma dos quatro lados do quadrado Crie uma fun\u00e7\u00e3o que retorne o seu nome completo, ela deve possuir os par\u00e2metros: nome e sobrenome Crie uma fun\u00e7\u00e3o que verifica se um n\u00famero \u00e9 par Crie uma fun\u00e7\u00e3o que retorne o tipo de dado do argumento passado nela (typeof) addEventListener \u00e9 uma fun\u00e7\u00e3o nativa do JavaScript, o primeiro par\u00e2metro \u00e9 o evento que ocorre e o segundo o Callback. Utilize essa fun\u00e7\u00e3o para mostrar no console o seu nome completo quando o evento 'scroll' ocorrer. Crie uma fun\u00e7\u00e3o e utilize as estruturas de controle e repeti\u00e7\u00e3o que aprendemos para imprimir no console a letra da m\u00fasica Um elefante incomoda , utilize a fun\u00e7\u00e3o para verificar se o n\u00famero \u00e9 par neste desenvolvimento.","title":"Hoisting"},{"location":"aula04/","text":"Objetos Object 1 2 3 4 5 6 7 8 9 var pessoa = { nome : 'Jo\u00e3ozinho' , idade : 28 , profissao : 'Desenvolvedor' , frequente : true } pessoa . nome ; // 'Jo\u00e3ozinho' pessoa . frequente ; // true Conjunto de vari\u00e1veis e fun\u00e7\u00f5es, que s\u00e3o chamadas de propriedades e m\u00e9todos. Propriedades e m\u00e9todos consistem em nome (chave) e valor M\u00e9todos Method 1 2 3 4 5 6 7 8 9 10 11 12 13 var quadrado = { lados : 4 , area : function ( lado ) { return lado * lado ; }, perimetro : function ( lado ) { return this . lados * lado ; } } quadrado . lados ; // 4 quadrado . area ( 5 ); // 25 quadrado . perimetro ( 5 ); // 20 \u00c9 uma propriedade que possui uma fun\u00e7\u00e3o no local do seu valor. Method ES6 1 2 3 4 5 6 7 8 9 var quadrado = { lados : 4 , area ( lado ) { return lado * lado ; }, perimetro ( lado ) { return this . lados * lado ; } } Abrevia\u00e7\u00e3o de area: function () {} para area () {} , no ES6+ Organiza\u00e7\u00e3o Objetos servem para organizar o c\u00f3digo em pequenas partes reutiliz\u00e1veis. Organiza\u00e7\u00e3o 1 2 3 4 5 Math . PI ; // 3.14 Math . random (); // n\u00famero aleat\u00f3rio var pi = Math . PI ; console . log ( pi ); // 3.14 Criar um Objeto Create 1 2 3 4 var carro = {}; var pessoa = {}; console . log ( typeof carro ); // 'object' Um objeto \u00e9 criado utilizando as chaves {} . Dot Notation Get Get 1 2 3 4 5 6 7 var menu = { width : 800 , height : 50 , backgroundColor : '#84E' } var bg = menu . backgroundColor ; // '#84E' Acesse propriedades de um objeto utilizando o ponto . Dot Notation Set Substitua o valor de uma propriedade utilizando . e o = ap\u00f3s o nome da mesma. Set 1 2 3 4 5 6 7 8 var menu = { width : 800 , height : 50 , backgroundColor : '#84E' , } menu . backgroundColor = '#000' ; console . log ( menu . backgroundColor ); // '#000' Adicionar Propriedades e M\u00e9todos Basta adicionar um novo nome e definir o valor. Add 1 2 3 4 5 6 var menu = { width : 800 , } menu . height = 50 ; menu . position = 'fixed' ; Palavra-chave this this ir\u00e1 fazer uma refer\u00eancia ao pr\u00f3prio objeto. this 1 2 3 4 5 6 7 8 9 10 var height = 120 ; var menu = { width : 800 , height : 50 , halfHeight () { return this . height / 2 ; } } menu . halfHeight (); // 25, sem o this, seria 60 Prot\u00f3tipo e Heran\u00e7a O objeto herda propriedades e m\u00e9todos do objeto que foi utilizado para criar o mesmo. Prototipo 1 2 3 4 5 6 var menu = { width : 800 , } menu . hasOwnProperty ( 'width' ) // true menu . hasOwnProperty ( 'height' ) // false hasOwnProperty \u00e9 um m\u00e9todo de Object Tudo \u00e9 Objeto Strings, N\u00fameros, Boolean, Objetos e mais, possuem propriedades e m\u00e9todos. Por isso s\u00e3o objetos. String 1 2 3 4 5 var nome = 'Jo\u00e3ozinho' ; nome . length ; // 9 nome . charAt ( 1 ); // 'o' nome . replace ( 'inho' , '\u00e3o' ); // 'Jo\u00e3z\u00e3o' nome ; // 'Jo\u00e3ozinho' Uma string herda propriedades e m\u00e9todos do construtor String () Number 1 2 3 4 var altura = 1.8 ; altura . toString (); // '1.8' altura . toFixed (); // '2' O n\u00famero, temporariamente, \u00e9 envolvido em um Objeto (coer\u00e7\u00e3o) , tendo acesso assim as suas propriedades e m\u00e9todos Fun\u00e7\u00f5es Function 1 2 3 4 5 6 7 8 9 10 11 function areaQuadrado ( lado ) { return lado * lado ; } areaQuadrado . toString (); //\"function areaQuadrado(lado) { // return lado * lado; //}\" areaQuadrado . length ; // 1 Elementos do DOM < a class = \"btn\" > Clique < /a> DOM 1 2 3 4 5 6 var btn = document . querySelector ( '.btn' ); btn . classList . add ( 'azul' ) // adiciona a classe azul btn . innerText ; // 'Clique' btn . addEventListener ( 'click' , function () { console . log ( 'Clicou' ) }) Exerc\u00edcio nomeie 3 propriedades ou m\u00e9todos de strings nomeie 5 propriedades ou m\u00e9todos de elementos do DOM nomeie 3 m\u00e9todos para fazer conver\u00e3o de n\u00fameros.","title":"T\u00f3pico 04"},{"location":"aula04/#objetos","text":"Object 1 2 3 4 5 6 7 8 9 var pessoa = { nome : 'Jo\u00e3ozinho' , idade : 28 , profissao : 'Desenvolvedor' , frequente : true } pessoa . nome ; // 'Jo\u00e3ozinho' pessoa . frequente ; // true Conjunto de vari\u00e1veis e fun\u00e7\u00f5es, que s\u00e3o chamadas de propriedades e m\u00e9todos. Propriedades e m\u00e9todos consistem em nome (chave) e valor","title":"Objetos"},{"location":"aula04/#metodos","text":"Method 1 2 3 4 5 6 7 8 9 10 11 12 13 var quadrado = { lados : 4 , area : function ( lado ) { return lado * lado ; }, perimetro : function ( lado ) { return this . lados * lado ; } } quadrado . lados ; // 4 quadrado . area ( 5 ); // 25 quadrado . perimetro ( 5 ); // 20 \u00c9 uma propriedade que possui uma fun\u00e7\u00e3o no local do seu valor. Method ES6 1 2 3 4 5 6 7 8 9 var quadrado = { lados : 4 , area ( lado ) { return lado * lado ; }, perimetro ( lado ) { return this . lados * lado ; } } Abrevia\u00e7\u00e3o de area: function () {} para area () {} , no ES6+","title":"M\u00e9todos"},{"location":"aula04/#organizacao","text":"Objetos servem para organizar o c\u00f3digo em pequenas partes reutiliz\u00e1veis. Organiza\u00e7\u00e3o 1 2 3 4 5 Math . PI ; // 3.14 Math . random (); // n\u00famero aleat\u00f3rio var pi = Math . PI ; console . log ( pi ); // 3.14","title":"Organiza\u00e7\u00e3o"},{"location":"aula04/#criar-um-objeto","text":"Create 1 2 3 4 var carro = {}; var pessoa = {}; console . log ( typeof carro ); // 'object' Um objeto \u00e9 criado utilizando as chaves {} .","title":"Criar um Objeto"},{"location":"aula04/#dot-notation-get","text":"Get 1 2 3 4 5 6 7 var menu = { width : 800 , height : 50 , backgroundColor : '#84E' } var bg = menu . backgroundColor ; // '#84E' Acesse propriedades de um objeto utilizando o ponto .","title":"Dot Notation Get"},{"location":"aula04/#dot-notation-set","text":"Substitua o valor de uma propriedade utilizando . e o = ap\u00f3s o nome da mesma. Set 1 2 3 4 5 6 7 8 var menu = { width : 800 , height : 50 , backgroundColor : '#84E' , } menu . backgroundColor = '#000' ; console . log ( menu . backgroundColor ); // '#000'","title":"Dot Notation Set"},{"location":"aula04/#adicionar-propriedades-e-metodos","text":"Basta adicionar um novo nome e definir o valor. Add 1 2 3 4 5 6 var menu = { width : 800 , } menu . height = 50 ; menu . position = 'fixed' ;","title":"Adicionar Propriedades e M\u00e9todos"},{"location":"aula04/#palavra-chave-this","text":"this ir\u00e1 fazer uma refer\u00eancia ao pr\u00f3prio objeto. this 1 2 3 4 5 6 7 8 9 10 var height = 120 ; var menu = { width : 800 , height : 50 , halfHeight () { return this . height / 2 ; } } menu . halfHeight (); // 25, sem o this, seria 60","title":"Palavra-chave this"},{"location":"aula04/#prototipo-e-heranca","text":"O objeto herda propriedades e m\u00e9todos do objeto que foi utilizado para criar o mesmo. Prototipo 1 2 3 4 5 6 var menu = { width : 800 , } menu . hasOwnProperty ( 'width' ) // true menu . hasOwnProperty ( 'height' ) // false hasOwnProperty \u00e9 um m\u00e9todo de Object","title":"Prot\u00f3tipo e Heran\u00e7a"},{"location":"aula04/#tudo-e-objeto","text":"Strings, N\u00fameros, Boolean, Objetos e mais, possuem propriedades e m\u00e9todos. Por isso s\u00e3o objetos. String 1 2 3 4 5 var nome = 'Jo\u00e3ozinho' ; nome . length ; // 9 nome . charAt ( 1 ); // 'o' nome . replace ( 'inho' , '\u00e3o' ); // 'Jo\u00e3z\u00e3o' nome ; // 'Jo\u00e3ozinho' Uma string herda propriedades e m\u00e9todos do construtor String () Number 1 2 3 4 var altura = 1.8 ; altura . toString (); // '1.8' altura . toFixed (); // '2' O n\u00famero, temporariamente, \u00e9 envolvido em um Objeto (coer\u00e7\u00e3o) , tendo acesso assim as suas propriedades e m\u00e9todos","title":"Tudo \u00e9 Objeto"},{"location":"aula04/#funcoes","text":"Function 1 2 3 4 5 6 7 8 9 10 11 function areaQuadrado ( lado ) { return lado * lado ; } areaQuadrado . toString (); //\"function areaQuadrado(lado) { // return lado * lado; //}\" areaQuadrado . length ; // 1","title":"Fun\u00e7\u00f5es"},{"location":"aula04/#elementos-do-dom","text":"< a class = \"btn\" > Clique < /a> DOM 1 2 3 4 5 6 var btn = document . querySelector ( '.btn' ); btn . classList . add ( 'azul' ) // adiciona a classe azul btn . innerText ; // 'Clique' btn . addEventListener ( 'click' , function () { console . log ( 'Clicou' ) }) Exerc\u00edcio nomeie 3 propriedades ou m\u00e9todos de strings nomeie 5 propriedades ou m\u00e9todos de elementos do DOM nomeie 3 m\u00e9todos para fazer conver\u00e3o de n\u00fameros.","title":"Elementos do DOM"},{"location":"aula05/","text":"Arrays e Loops Array \u00c9 um grupo de valores geralmente relacionados. Servem para guardarmos diferentes valores em uma \u00fanica vari\u00e1vel. Array 1 2 3 var videoGames = [ 'Switch' , 'PS5' , 'XBox' ]; videoGames [ 0 ] // Switch videoGames [ 2 ] // Xbox M\u00e9todos e Propriedades de uma Array Methods 1 2 3 4 5 var videoGames = [ 'Switch' , 'PS5' , 'XBox' ]; videoGames . pop (); // Remove o \u00faltimo item e retorna ele videoGames . push ( '3DS' ); // Adiciona ao final da array videoGames . length ; // 3 For Loop O for loop possui 3 partes, in\u00edcio , condi\u00e7\u00e3o e incremento For 1 2 3 4 for ( var numero = 0 ; numero < 10 ; numero ++ ) { console . log ( numero ); } // Retorna de 0 a 9 no console While Loop While 1 2 3 4 5 6 var i = 0 ; while ( i < 10 ) { console . log ( i ); i ++ ; } // Retorna de 0 a 9 no console Arrays e Loops Loops em arrays 1 2 3 4 var videoGames = [ 'Switch' , 'PS5' , 'XBox' , '3DS' ]; for ( var i = 0 ; i < videoGames . length ; i ++ ) { console . log ( videoGames [ i ]); } O que acontece no c\u00f3digo anterior? retorna cada item do array no console Break Break 1 2 3 4 5 6 7 var videoGames = [ 'Switch' , 'PS4' , 'XBox' , '3DS' ]; for ( var i = 0 ; i < videoGames . length ; i ++ ) { console . log ( videoGames [ i ]); if ( videoGames [ i ] === 'PS4' ) { break ; } } O loop ir\u00e1 parar caso encontro e palavra break forEach forEach \u00e9 um m\u00e9todo que executa uma fun\u00e7\u00e3o para cada item da Array. \u00c9 uma forma mais simples de utilizarmos um loop com arrays (ou array-like) for each 1 2 3 4 5 var videoGames = [ 'Switch' , 'PS5' , 'XBox' , '3DS' ]; videoGames . forEach ( function ( item ) { console . log ( item ); }); // O argumento item ser\u00e1 atribu\u00eddo dinamicamente Podemos passar os seguintes par\u00e2metros item , index e array . Exerc\u00edcio Crie uma array com os anos que o Brasil ganhou a copa 1958, 1962, 1970, 1994, 2002 Interaja com a array utilizando um loop, para cada ano mostrar no console a seguinte mensagem: O brasil ganhou a copa de ANO; Interaja com um loop nas frutas abaixo e pare ao encontrar Pera var frutas = [ 'Banana' , 'Ma\u00e7\u00e3' , 'Pera' , 'Uva' , 'Mel\u00e2ncia' ] Coloque a \u00faltima fruta do array acima em uma vari\u00e1vel, sem remover a mesma da array, depois imprima essa vari\u00e1vel no console. ESCOPO DE FUN\u00c7\u00c3O Vari\u00e1veis declaradas dentro de fun\u00e7\u00f5es n\u00e3o s\u00e3o acessadas fora das mesmas. Escopo evita conflitos 1 2 3 4 5 6 7 function mostrarCarro () { var carro = 'Fusca' ; console . log ( carro ); } mostrarCarro (); // Fusca no console console . log ( carro ); // Erro, carro is not defined VARI\u00c1VEL GLOBAL (ERRO) Declarar vari\u00e1veis sem a palavra chave var , const ou let , cria uma vari\u00e1vel que pode ser acessar em qualquer escopo (global). Isso \u00e9 um erro. 'use strict' impede isso. Erro 1 2 3 4 5 6 7 function mostrarCarro () { carro = 'Fusca' ; console . log ( carro ); } mostrarCarro (); // Fusca console . log ( carro ); // Fusca ESCOPO DE FUN\u00c7\u00c3O (PAI) Vari\u00e1veis declaradas no escopo pai da fun\u00e7\u00e3o, conseguem ser acessadas pelas fun\u00e7\u00f5es. Pai 1 2 3 4 5 6 7 8 9 var carro = 'Fusca' ; function mostrarCarro () { var frase = `Meu carro \u00e9 um ${ carro } ` ; console . log ( frase ); } mostrarCarro (); // Meu carro \u00e9 um Fusca console . log ( carro ); // Fusca ESCOPO DE BLOCO Vari\u00e1veis criadas com var , vazam o bloco. Por isso com a introdu\u00e7\u00e3o do ES6 a melhor forma de declarmos uma vari\u00e1vel \u00e9 utilizando const e let , pois estas respeitam o escopo de bloco. escopo 1 2 3 4 5 if ( true ) { var carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); VAR VAZA O BLOCO Mesmo com a condi\u00e7\u00e3o falsa, a vari\u00e1vel ainda ser\u00e1 declarada utilizando hoisting e o valor ficar\u00e1 como undefined. var 1 2 3 4 5 if ( false ) { var carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // undefined CONST E LET NO LUGAR DE VAR A partir de agora vamos utilizar apenas const e let para declarmos vari\u00e1veis. let 1 2 3 4 5 if ( true ) { const carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // erro, carro is not defined {} CRIA UM BLOCO Chaves {} criam um escopo de bloco, n\u00e3o confundir com a cria\u00e7\u00e3o de objetos = {} {} 1 2 3 4 5 6 { var carro = 'Fusca' ; const ano = 2018 ; } console . log ( carro ); // Carro console . log ( ano ); // erro ano is not defined Exerc\u00edcio Por qual motivo o c\u00f3digo abaixo retorna com erros? ex1 1 2 3 4 5 6 { var cor = 'preto' ; const marca = 'Fiat' ; let portas = 4 ; } console . log ( var , marca , portas ); Como corrigir o erro abaixo? ex2 1 2 3 4 5 6 7 8 9 function somarDois ( x ) { const dois = 2 ; return x + dois ; } function dividirDois ( x ) { return x + dois ; } somarDois ( 4 ); dividirDois ( 6 ); O que fazer para total retornar 500? ex3 1 2 3 4 5 6 7 8 var numero = 50 ; for ( var numero = 0 ; numero < 10 ; numero ++ ) { console . log ( numero ); } const total = 10 * numero ; console . log ( total );","title":"T\u00f3pico 05"},{"location":"aula05/#arrays-e-loops","text":"","title":"Arrays e Loops"},{"location":"aula05/#array","text":"\u00c9 um grupo de valores geralmente relacionados. Servem para guardarmos diferentes valores em uma \u00fanica vari\u00e1vel. Array 1 2 3 var videoGames = [ 'Switch' , 'PS5' , 'XBox' ]; videoGames [ 0 ] // Switch videoGames [ 2 ] // Xbox","title":"Array"},{"location":"aula05/#metodos-e-propriedades-de-uma-array","text":"Methods 1 2 3 4 5 var videoGames = [ 'Switch' , 'PS5' , 'XBox' ]; videoGames . pop (); // Remove o \u00faltimo item e retorna ele videoGames . push ( '3DS' ); // Adiciona ao final da array videoGames . length ; // 3","title":"M\u00e9todos e Propriedades de uma Array"},{"location":"aula05/#for-loop","text":"O for loop possui 3 partes, in\u00edcio , condi\u00e7\u00e3o e incremento For 1 2 3 4 for ( var numero = 0 ; numero < 10 ; numero ++ ) { console . log ( numero ); } // Retorna de 0 a 9 no console","title":"For Loop"},{"location":"aula05/#while-loop","text":"While 1 2 3 4 5 6 var i = 0 ; while ( i < 10 ) { console . log ( i ); i ++ ; } // Retorna de 0 a 9 no console","title":"While Loop"},{"location":"aula05/#arrays-e-loops_1","text":"Loops em arrays 1 2 3 4 var videoGames = [ 'Switch' , 'PS5' , 'XBox' , '3DS' ]; for ( var i = 0 ; i < videoGames . length ; i ++ ) { console . log ( videoGames [ i ]); } O que acontece no c\u00f3digo anterior? retorna cada item do array no console","title":"Arrays e Loops"},{"location":"aula05/#break","text":"Break 1 2 3 4 5 6 7 var videoGames = [ 'Switch' , 'PS4' , 'XBox' , '3DS' ]; for ( var i = 0 ; i < videoGames . length ; i ++ ) { console . log ( videoGames [ i ]); if ( videoGames [ i ] === 'PS4' ) { break ; } } O loop ir\u00e1 parar caso encontro e palavra break","title":"Break"},{"location":"aula05/#foreach","text":"forEach \u00e9 um m\u00e9todo que executa uma fun\u00e7\u00e3o para cada item da Array. \u00c9 uma forma mais simples de utilizarmos um loop com arrays (ou array-like) for each 1 2 3 4 5 var videoGames = [ 'Switch' , 'PS5' , 'XBox' , '3DS' ]; videoGames . forEach ( function ( item ) { console . log ( item ); }); // O argumento item ser\u00e1 atribu\u00eddo dinamicamente Podemos passar os seguintes par\u00e2metros item , index e array . Exerc\u00edcio Crie uma array com os anos que o Brasil ganhou a copa 1958, 1962, 1970, 1994, 2002 Interaja com a array utilizando um loop, para cada ano mostrar no console a seguinte mensagem: O brasil ganhou a copa de ANO; Interaja com um loop nas frutas abaixo e pare ao encontrar Pera var frutas = [ 'Banana' , 'Ma\u00e7\u00e3' , 'Pera' , 'Uva' , 'Mel\u00e2ncia' ] Coloque a \u00faltima fruta do array acima em uma vari\u00e1vel, sem remover a mesma da array, depois imprima essa vari\u00e1vel no console.","title":"forEach"},{"location":"aula05/#escopo-de-funcao","text":"Vari\u00e1veis declaradas dentro de fun\u00e7\u00f5es n\u00e3o s\u00e3o acessadas fora das mesmas. Escopo evita conflitos 1 2 3 4 5 6 7 function mostrarCarro () { var carro = 'Fusca' ; console . log ( carro ); } mostrarCarro (); // Fusca no console console . log ( carro ); // Erro, carro is not defined VARI\u00c1VEL GLOBAL (ERRO) Declarar vari\u00e1veis sem a palavra chave var , const ou let , cria uma vari\u00e1vel que pode ser acessar em qualquer escopo (global). Isso \u00e9 um erro. 'use strict' impede isso. Erro 1 2 3 4 5 6 7 function mostrarCarro () { carro = 'Fusca' ; console . log ( carro ); } mostrarCarro (); // Fusca console . log ( carro ); // Fusca ESCOPO DE FUN\u00c7\u00c3O (PAI) Vari\u00e1veis declaradas no escopo pai da fun\u00e7\u00e3o, conseguem ser acessadas pelas fun\u00e7\u00f5es. Pai 1 2 3 4 5 6 7 8 9 var carro = 'Fusca' ; function mostrarCarro () { var frase = `Meu carro \u00e9 um ${ carro } ` ; console . log ( frase ); } mostrarCarro (); // Meu carro \u00e9 um Fusca console . log ( carro ); // Fusca ESCOPO DE BLOCO Vari\u00e1veis criadas com var , vazam o bloco. Por isso com a introdu\u00e7\u00e3o do ES6 a melhor forma de declarmos uma vari\u00e1vel \u00e9 utilizando const e let , pois estas respeitam o escopo de bloco. escopo 1 2 3 4 5 if ( true ) { var carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); VAR VAZA O BLOCO Mesmo com a condi\u00e7\u00e3o falsa, a vari\u00e1vel ainda ser\u00e1 declarada utilizando hoisting e o valor ficar\u00e1 como undefined. var 1 2 3 4 5 if ( false ) { var carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // undefined CONST E LET NO LUGAR DE VAR A partir de agora vamos utilizar apenas const e let para declarmos vari\u00e1veis. let 1 2 3 4 5 if ( true ) { const carro = 'Fusca' ; console . log ( carro ); } console . log ( carro ); // erro, carro is not defined {} CRIA UM BLOCO Chaves {} criam um escopo de bloco, n\u00e3o confundir com a cria\u00e7\u00e3o de objetos = {} {} 1 2 3 4 5 6 { var carro = 'Fusca' ; const ano = 2018 ; } console . log ( carro ); // Carro console . log ( ano ); // erro ano is not defined Exerc\u00edcio Por qual motivo o c\u00f3digo abaixo retorna com erros? ex1 1 2 3 4 5 6 { var cor = 'preto' ; const marca = 'Fiat' ; let portas = 4 ; } console . log ( var , marca , portas ); Como corrigir o erro abaixo? ex2 1 2 3 4 5 6 7 8 9 function somarDois ( x ) { const dois = 2 ; return x + dois ; } function dividirDois ( x ) { return x + dois ; } somarDois ( 4 ); dividirDois ( 6 ); O que fazer para total retornar 500? ex3 1 2 3 4 5 6 7 8 var numero = 50 ; for ( var numero = 0 ; numero < 10 ; numero ++ ) { console . log ( numero ); } const total = 10 * numero ; console . log ( total );","title":"ESCOPO DE FUN\u00c7\u00c3O"},{"location":"aula06/","text":"DOM DOCUMENT OBJECT MODEL (DOM) \u00c9 uma interface que representa documentos HTML e XML atrav\u00e9s de objetos. Com ela \u00e9 poss\u00edvel manipular a estrutura, estilo e conte\u00fado destes documentos. DOM 1 2 3 4 5 console . log ( window ); // window \u00e9 o objeto global do browser // possui diferentes m\u00e9todos e propriedades window . innerHeight ; // retorna a altura do browser DOM Ao inspecionar elemento com o Chrome, voc\u00ea est\u00e1 vendo a representa\u00e7\u00e3o oficial do DOM. {} WINDOW E DOCUMENT S\u00e3o os objetos principais do DOM, boa parte da manipula\u00e7\u00e3o \u00e9 feita atrav\u00e9s dos seus m\u00e9todos e propriedades. windows 1 2 3 4 5 window . alert ( 'Isso \u00e9 um alerta' ); alert ( 'Isso \u00e9 um alerta' ); // Funciona document . querySelector ( 'h1' ); // Seleciona o primeiro h1 document . body ; // Retorna o body window \u00e9 o objeto global, por isso n\u00e3o precisamos chamar ele na frente dos seus m\u00e9todos e propriedades. NODE Toda tag html \u00e9 representada pelo objeto Element e por isso herda os seus m\u00e9todos e propriedades. Element \u00e9 um tipo de objeto Node. node 1 2 3 4 5 6 7 8 9 const titulo = document . querySelector ( 'h1' ); titulo . innerText ; // retorna o texto; titulo . classList ; // retorna as classes; titulo . id ; // retorna o id; titulo . offsetHeight ; // retorna a altura do elemento; titulo . addEventListener ( 'click' , callback ); // ativa a fun\u00e7\u00e3o callback ao click no titulo Sele\u00e7\u00e3o de Elementos ID getElementById seleciona e retorna elementos do DOM id 1 2 3 4 5 6 // Seleciona pelo ID const animaisSection = document . getElementById ( 'animais' ); const contatoSection = document . getElementById ( 'contato' ); // Retorna null caso n\u00e3o exista const naoExiste = document . getElementById ( 'teste' ); CLASSE E TAG getElementsByClassName e getElementsByTagName selecionam e retornam uma lista de elementos do DOM. A lista retornada est\u00e1 ao vivo, significa que se elementos forem adicionados, ela ser\u00e1 automaticamente atualizada. tag 1 2 3 4 5 6 7 8 9 // Seleciona pela classe, retorna uma HTMLCollection const gridSection = document . getElementsByClassName ( 'grid-section' ); const contato = document . getElementsByClassName ( 'grid-section contato' ); // Seleciona todas as UL's, retorna uma HTMLCollection const ul = document . getElementsByTagName ( 'ul' ); // Retorna o primeiro elemento console . log ( gridSection [ 0 ]); SELETOR GERAL \u00daNICO querySelector retorna o primeiro elemento que combinar com o seu seletor CSS. querySelector 1 2 3 4 5 6 7 8 const animais = document . querySelector ( '.animais' ); const contato = document . querySelector ( '#contato' ); const ultimoItem = document . querySelector ( '.animais-lista li:last-child' ); const linkCSS = document . querySelector ( '[href^=\"https://\"]' ); const primeiroUl = document . querySelector ( 'ul' ); // Busca dentro do Ul apenas const navItem = primeiroUl . querySelector ( 'li' ); SELETOR GERAL LISTA querySelectorAll retorna todos os elementos compat\u00edveis com o seletor CSS em uma NodeList querySelectorAll 1 2 3 4 5 6 7 const gridSection = document . querySelectorAll ( '.grid-section' ); const listas = document . querySelectorAll ( 'ul' ); const titulos = document . querySelectorAll ( '.titulo' ); const fotosAnimais = document . querySelectorAll ( '.animais-lista img' ); // Retorna o segundo elemento console . log ( gridSection [ 1 ]); Diferente do getElementsByClassName, a lista aqui \u00e9 est\u00e1tica HTMLCOLLECTION VS NODELIST A diferen\u00e7a est\u00e1 nos m\u00e9todos e propriedades de ambas. Al\u00e9m disso a NodeList retornada com querySelectorAll \u00e9 est\u00e1tica. nodelist 1 2 3 4 5 6 7 8 const titulo = document . querySelector ( '.titulo' ); const gridSectionHTML = document . getElementsByClassName ( 'grid-section' ); const gridSectionNode = document . querySelectorAll ( '.grid-section' ); titulo . classList . add ( 'grid-section' ); console . log ( gridSectionHTML ); // 4 itens console . log ( gridSectionNode ); // 3 itens ARRAY-LIKE HTMLCollection e NodeList s\u00e3o array-like, parecem uma array mas n\u00e3o s\u00e3o. O m\u00e9todo de Array forEach () por exemplo, existe apenas em NodeList. array-like 1 2 3 4 5 6 7 const gridSection = document . querySelectorAll ( '.grid-section' ); gridSection . forEach ( function ( gridItem , index , array ) { gridItem . classList . add ( 'azul' ); console . log ( index ) // index do item na array console . log ( array ) // a array completa }); \u00c9 poss\u00edvel transformar array-like em uma Array real Basta utilizar o m\u00e9todo Array . from ( gridSection ) \" Exerc\u00edcio Retorne no console todas as imagens de um site Selecione o primeiro h2 Selecione o \u00faltimo p do site Reposit\u00f3rio para os exerc\u00edcios: https://github.com/gleonel/TWAcode.git FOREACH Constantemente vamos selecionar uma lista de itens do dom. A melhor forma para interagirmos com os mesmos \u00e9 utilizando o m\u00e9todo forEach. foreach 1 2 3 4 5 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( function ( item ){ console . log ( item ); }); PAR\u00c2METROS DO FOREACH O primeiro par\u00e2metro \u00e9 o callback, ou seja, a fun\u00e7\u00e3o que ser\u00e1 ativada a cada item. Esse fun\u00e7\u00e3o pode receber tr\u00eas par\u00e2metros: valorAtual, index e array; foreach 1 2 3 4 5 6 7 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( function ( valorAtual , index , array ){ console . log ( item ); // o item atual no loop console . log ( index ); // o n\u00famero do index console . log ( array ); // a Array completa }); FOREACH E ARRAY forEach \u00e9 um m\u00e9todo de Array, alguns objetos array-like possuem este m\u00e9todo. Caso n\u00e3o possua, o ideal \u00e9 transform\u00e1-los em uma array. array-like 1 2 3 4 5 6 const titulos = document . getElementsByClassName ( 'titulo' ); const titulosArray = Array . from ( titulos ); titulosArray . forEach ( function ( item ){ console . log ( item ); }); ARROW FUNCTION Sintaxe curta em rela\u00e7\u00e3o a function expression . Basta remover a palavra chave function e adicionar a fat arrow => ap\u00f3s os argumentos. arrow 1 2 3 4 5 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach (( item ) => { console . log ( item ); }); PAR\u00c2METROS E PAR\u00caNTESES 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const imgs = document . querySelectorAll ( 'img' ); // par\u00e2metro \u00fanico n\u00e3o precisa de par\u00eanteses imgs . forEach ( item => { console . log ( item ); }); // multiplos par\u00e2metros precisam de par\u00eanteses imgs . forEach (( item , index ) => { console . log ( item , index ); }); // sem par\u00e2metro precisa dos par\u00eanteses, mesmo vazio let i = 0 ; imgs . forEach (() => { console . log ( i ++ ); }); RETURN \u00c9 poss\u00edvel omitir as chaves {} para uma fun\u00e7\u00e3o que retorna uma linha. => 1 2 3 4 5 6 7 8 9 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( item => console . log ( item ) // N\u00e3o \u00e9 permitido fechar a linha com ; ); imgs . forEach ( item => console . log ( item )); Exerc\u00edcio Mostre no console cada par\u00e1grado do site Mostre o texto dos par\u00e1grafos no console Como corrigir os erros abaixo: ex3 1 2 3 4 5 6 7 8 9 10 11 12 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( item , index => { console . log ( item , index ); }); let i = 0 ; imgs . forEach ( => { console . log ( i ++ ); }); imgs . forEach (() => i ++ ); CLASSLIST Retorna uma lista com as classes do elemento. Permite adicionar, remover e verificar se cont\u00e9m. classlist 1 2 3 4 5 6 7 8 9 10 const menu = document . querySelector ( '.menu' ); menu . className ; // string menu . classList ; // lista de classes menu . classList . add ( 'ativo' ); menu . classList . add ( 'ativo' , 'mobile' ); // duas classes menu . classList . remove ( 'ativo' ); menu . classList . toggle ( 'ativo' ); // adiciona/remove a classe menu . classList . contains ( 'ativo' ); // true ou false menu . classList . replace ( 'ativo' , 'inativo' ); ATTRIBUTES Retorna uma array-like com os atributos do elemento. attributes 1 2 3 4 const animais = document . querySelector ( '.animais' ); animais . attributes ; // retorna todos os atributos animais . attributes [ 0 ]; // retorna o primeiro atributo GETATTRIBUTE E SETATTRIBUTE M\u00e9todos que retornam ou definem de acordo com o atributo selecionado get_set 1 2 3 4 5 6 7 8 const img = document . querySelector ( 'img' ); img . getAttribute ( 'src' ); // valor do src img . setAttribute ( 'alt' , 'Texto Alternativo' ); // muda o alt img . hasAttribute ( 'id' ); // true / false img . removeAttribute ( 'alt' ); // remove o alt img . hasAttributes (); // true / false se tem algum atributo READ ONLY VS WRITABLE Existem propriedades que n\u00e3o permitem a mudan\u00e7a de seus valores, essas s\u00e3o considerados Read Only, ou seja, apenas leitura. read only 1 2 3 4 5 6 7 const animais = document . querySelector ( '.animais' ); animais . className ; // string com o nome das classes animais . className = 'azul' ; // substitui completamente a string animais . className += ' vermelho' ; // adiciona vermelho \u00e0 string animais . attributes = 'class=\"ativo\"' ; // n\u00e3o funciona, read-only Exerc\u00edcio Adicione a classe ativo a todos os itens do menu Remove a classe ativo de todos os itens do menu e mantenha apenas no primeiro Verifique se as imagens possuem o atributo alt Modifique o href do link externo no menu ADDEVENTLISTENER Adiciona uma fun\u00e7\u00e3o ao elemento, esta chamada de callback , que ser\u00e1 ativada assim que certo evento ocorrer neste elemento. event 1 2 3 4 5 6 const img = document . querySelector ( 'img' ); // elemento.addEventListener(event, callback, options) img . addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }) CALLBACK Quando ir\u00e1 reutiliza-la \u00e9 boa pr\u00e1tica separar a fun\u00e7\u00e3o de callback do addEventListener, ou seja, declarar uma fun\u00e7\u00e3o ao inv\u00e9s de passar diretamente uma fun\u00e7\u00e3o an\u00f4nima callback 1 2 3 4 5 6 7 8 9 10 11 12 13 const img = document . querySelector ( 'img' ); function callback () { console . log ( 'Clicou' ); } img . addEventListener ( 'click' , callback ); // \ud83d\ude80 img . addEventListener ( 'click' , callback ()); // undefined img . addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }) img . addEventListener ( 'click' , () => { console . log ( 'Clicou' ); }) EVENT O primeiro par\u00e2metro do callback \u00e9 referente ao evento que ocorreu. event 1 2 3 4 5 6 7 const img = document . querySelector ( 'img' ); function callback ( event ) { console . log ( event ); } img . addEventListener ( 'click' , callback ); Geralmente utilizam e como nome do par\u00e2metro PROPRIEDADES DO EVENT title 1 2 3 4 5 6 7 8 9 10 11 const animaisLista = document . querySelector ( '.animais-lista' ); function executarCallback ( event ) { const currentTarget = event . currentTarget ; // this const target = event . target ; // onde o clique ocorreu const type = event . type ; // tipo de evento const path = event . path ; console . log ( currentTarget , target , type , path ); } animaisLista . addEventListener ( 'click' , executarCallback ); EVENT.PREVENTDEFAULT() Previne o comportamento padr\u00e3o do evento no browser. No caso de um link externo, por exemplo, ir\u00e1 previnir que o link seja ativado. prevent default 1 2 3 4 5 6 7 8 const linkExterno = document . querySelector ( 'a[href^=\"http\"]' ); function clickNoLink ( event ) { event . preventDefault (); console . log ( event . currentTarget . href ); } linkExterno . addEventListener ( 'click' , clickNoLink ); THIS A palavra chave this \u00e9 uma palavra especial de JavaScript, que pode fazer refer\u00eancia a diferentes objetos dependendo do contexto. No caso de eventos, ela far\u00e1 refer\u00eancia ao elemento em que addEventListener foi adicionado. this 1 2 3 4 5 6 7 8 const img = document . querySelector ( 'img' ); function callback ( event ) { console . log ( this ); // retorna a imagem console . log ( this . getAttribute ( 'src' )); } img . addEventListener ( 'click' , callback ); DIFERENTES EVENTOS Existem diversos eventos como click , scroll , resize , keydown , keyup , mouseenter e mais. Eventos podem ser adicionados a diferentes elementos, como o window e document tamb\u00e9m. events 1 2 3 4 5 6 7 8 9 10 11 const h1 = document . querySelector ( 'h1' ); function callback ( event ) { console . log ( event . type , event ); } h1 . addEventListener ( 'click' , callback ); h1 . addEventListener ( 'mouseenter' , callback ); window . addEventListener ( 'scroll' , callback ); window . addEventListener ( 'resize' , callback ); window . addEventListener ( 'keydown' , callback ); Eventos https://developer.mozilla.org/en-US/docs/Web/Events KEYBOARD Voc\u00ea pode adicionar atalhos para facilitar a navega\u00e7\u00e3o no seu site, atrav\u00e9s de eventos do keyboard . keyboard 1 2 3 4 5 6 7 8 function handleKeyboard ( event ) { if ( event . key === 'a' ) document . body . classList . toggle ( 'azul' ); else if ( event . key === 'v' ) document . body . classList . toggle ( 'vermelho' ); } window . addEventListener ( 'keydown' , handleKeyboard ); FOREACH E EVENTOS O m\u00e9todo addEventListener \u00e9 adicionado \u00e0 um \u00fanico elemento, ent\u00e3o \u00e9 necess\u00e1rio um loop entre elementos de uma lista, para adicionarmos \u00e0 cada um deles. foeach 1 2 3 4 5 6 7 8 9 10 const imgs = document . querySelectorAll ( 'img' ); function imgSrc ( event ) { const src = event . currentTarget . getAttribute ( 'src' ); console . log ( src ); } imgs . forEach (( img ) => { img . addEventListener ( 'click' , imgSrc ); }); Exerc\u00edcio Quando o usu\u00e1rio clicar nos links internos do site, adicione a classe ativo ao item clicado e remova dos demais itens caso eles possuam a mesma. Previna o comportamento padr\u00e3o desses links Selecione todos os elementos do site come\u00e7ando a partir do body, ao clique mostre exatamente quais elementos est\u00e3o sendo clicados Utilizando o c\u00f3digo anterior, ao inv\u00e9s de mostrar no console, remova o elemento que est\u00e1 sendo clicado, o m\u00e9todo remove() remove um elemento OUTERHTML, INNERHTML E INNERTEXT Propriedades que retornam uma string contendo o html ou texto. \u00c9 poss\u00edvel atribuir um novo valor para as mesmas element . innerText = 'Novo Texto' . text 1 2 3 4 5 6 7 8 const menu = document . querySelector ( '.menu' ); menu . outerHTML ; // todo o html do elemento menu . innerHTML ; // html interno menu . innerText ; // texto, sem tags menu . innerText = '<p>Texto</p>' ; // a tag vai como texto menu . innerHTML = '<p>Texto</p>' ; // a tag \u00e9 renderizada TRASVERSING Como navegar pelo DOM, utilizando suas propriedades e m\u00e9todos. transversing 1 2 3 4 5 6 7 8 9 10 11 12 13 const lista = document . querySelector ( '.animais-lista' ); lista . parentElement ; // pai lista . parentElement . parentElement ; // pai do pai lista . previousElementSibling ; // elemento acima lista . nextElementSibling ; // elemento abaixo lista . children ; // HTMLCollection com os filhos lista . children [ 0 ]; // primeiro filho lista . children [ -- lista . children . length ]; // \u00faltimo filho lista . querySelectorAll ( 'li' ); // todas as LI's lista . querySelector ( 'li:last-child' ); // \u00faltimo filho ELEMENT VS NODE Element's represetam um elemento html, ou seja, uma tag. Node representa um n\u00f3, e pode ser um elemento (Element), texto, coment\u00e1rio, quebra de linha e mais. element 1 2 3 4 5 6 7 const lista = document . querySelector ( '.animais-lista' ); lista . previousElementSibling ; // elemento acima lista . previousSibling ; // node acima lista . firstChild ; // primeiro node child lista . childNodes ; // todos os node child MANIPULANDO ELEMENTOS \u00c9 poss\u00edvel mover elementos no dom com m\u00e9todos de Node. elements 1 2 3 4 5 6 7 8 const lista = document . querySelector ( '.animais-lista' ); const contato = document . querySelector ( '.contato' ); const titulo = contato . querySelector ( '.titulo' ); contato . appendChild ( lista ); // move lista para o final de contato contato . insertBefore ( lista , titulo ); // insere a lista antes de titulo contato . removeChild ( titulo ); // remove titulo de contato contato . replaceChild ( lista , titulo ); // substitui titulo por lista NOVOS ELEMENTOS Podemos criar novos elementos com o m\u00e9todo createElement () createElement 1 2 3 4 5 6 7 const animais = document . querySelector ( '.animais' ); const novoH1 = document . createElement ( 'h1' ); novoH1 . innerText = 'Novo T\u00edtulo' ; novoH1 . classList . add ( 'titulo' ); animais . appendChild ( novoH1 ); CLONAR ELEMENTOS Todo elemento selecionado \u00e9 \u00fanico. Para criarmos um novo elemento baseado no anterior, \u00e9 necess\u00e1rio utilizar o m\u00e9todo cloneNode () clone 1 2 3 4 5 6 7 8 const titulo = document . querySelector ( 'h1' ); const titulo2 = document . querySelector ( 'h1' ); const novoTitulo = titulo ; // titulo, titulo2 e novoTitulo s\u00e3o iguais const cloneTitulo = titulo . cloneNode ( true ); //true sinaliza para incluir os filhos const contato = document . querySelector ( '.contato' ); contato . appendChild ( cloneTitulo ); Exerc\u00edcio Duplique o menu e adicione ele em copy Selecione o primeiro DT da dl de Faq Selecione o DD referente ao primeiro DT Substitua o conte\u00fado html de .faq pelo de .animais","title":"T\u00f3pico 06"},{"location":"aula06/#dom","text":"","title":"DOM"},{"location":"aula06/#document-object-model-dom","text":"\u00c9 uma interface que representa documentos HTML e XML atrav\u00e9s de objetos. Com ela \u00e9 poss\u00edvel manipular a estrutura, estilo e conte\u00fado destes documentos. DOM 1 2 3 4 5 console . log ( window ); // window \u00e9 o objeto global do browser // possui diferentes m\u00e9todos e propriedades window . innerHeight ; // retorna a altura do browser DOM Ao inspecionar elemento com o Chrome, voc\u00ea est\u00e1 vendo a representa\u00e7\u00e3o oficial do DOM. {}","title":"DOCUMENT OBJECT MODEL (DOM)"},{"location":"aula06/#window-e-document","text":"S\u00e3o os objetos principais do DOM, boa parte da manipula\u00e7\u00e3o \u00e9 feita atrav\u00e9s dos seus m\u00e9todos e propriedades. windows 1 2 3 4 5 window . alert ( 'Isso \u00e9 um alerta' ); alert ( 'Isso \u00e9 um alerta' ); // Funciona document . querySelector ( 'h1' ); // Seleciona o primeiro h1 document . body ; // Retorna o body window \u00e9 o objeto global, por isso n\u00e3o precisamos chamar ele na frente dos seus m\u00e9todos e propriedades.","title":"WINDOW E DOCUMENT"},{"location":"aula06/#node","text":"Toda tag html \u00e9 representada pelo objeto Element e por isso herda os seus m\u00e9todos e propriedades. Element \u00e9 um tipo de objeto Node. node 1 2 3 4 5 6 7 8 9 const titulo = document . querySelector ( 'h1' ); titulo . innerText ; // retorna o texto; titulo . classList ; // retorna as classes; titulo . id ; // retorna o id; titulo . offsetHeight ; // retorna a altura do elemento; titulo . addEventListener ( 'click' , callback ); // ativa a fun\u00e7\u00e3o callback ao click no titulo","title":"NODE"},{"location":"aula06/#selecao-de-elementos","text":"","title":"Sele\u00e7\u00e3o de Elementos"},{"location":"aula06/#id","text":"getElementById seleciona e retorna elementos do DOM id 1 2 3 4 5 6 // Seleciona pelo ID const animaisSection = document . getElementById ( 'animais' ); const contatoSection = document . getElementById ( 'contato' ); // Retorna null caso n\u00e3o exista const naoExiste = document . getElementById ( 'teste' );","title":"ID"},{"location":"aula06/#classe-e-tag","text":"getElementsByClassName e getElementsByTagName selecionam e retornam uma lista de elementos do DOM. A lista retornada est\u00e1 ao vivo, significa que se elementos forem adicionados, ela ser\u00e1 automaticamente atualizada. tag 1 2 3 4 5 6 7 8 9 // Seleciona pela classe, retorna uma HTMLCollection const gridSection = document . getElementsByClassName ( 'grid-section' ); const contato = document . getElementsByClassName ( 'grid-section contato' ); // Seleciona todas as UL's, retorna uma HTMLCollection const ul = document . getElementsByTagName ( 'ul' ); // Retorna o primeiro elemento console . log ( gridSection [ 0 ]);","title":"CLASSE E TAG"},{"location":"aula06/#seletor-geral-unico","text":"querySelector retorna o primeiro elemento que combinar com o seu seletor CSS. querySelector 1 2 3 4 5 6 7 8 const animais = document . querySelector ( '.animais' ); const contato = document . querySelector ( '#contato' ); const ultimoItem = document . querySelector ( '.animais-lista li:last-child' ); const linkCSS = document . querySelector ( '[href^=\"https://\"]' ); const primeiroUl = document . querySelector ( 'ul' ); // Busca dentro do Ul apenas const navItem = primeiroUl . querySelector ( 'li' );","title":"SELETOR GERAL \u00daNICO"},{"location":"aula06/#seletor-geral-lista","text":"querySelectorAll retorna todos os elementos compat\u00edveis com o seletor CSS em uma NodeList querySelectorAll 1 2 3 4 5 6 7 const gridSection = document . querySelectorAll ( '.grid-section' ); const listas = document . querySelectorAll ( 'ul' ); const titulos = document . querySelectorAll ( '.titulo' ); const fotosAnimais = document . querySelectorAll ( '.animais-lista img' ); // Retorna o segundo elemento console . log ( gridSection [ 1 ]); Diferente do getElementsByClassName, a lista aqui \u00e9 est\u00e1tica","title":"SELETOR GERAL LISTA"},{"location":"aula06/#htmlcollection-vs-nodelist","text":"A diferen\u00e7a est\u00e1 nos m\u00e9todos e propriedades de ambas. Al\u00e9m disso a NodeList retornada com querySelectorAll \u00e9 est\u00e1tica. nodelist 1 2 3 4 5 6 7 8 const titulo = document . querySelector ( '.titulo' ); const gridSectionHTML = document . getElementsByClassName ( 'grid-section' ); const gridSectionNode = document . querySelectorAll ( '.grid-section' ); titulo . classList . add ( 'grid-section' ); console . log ( gridSectionHTML ); // 4 itens console . log ( gridSectionNode ); // 3 itens","title":"HTMLCOLLECTION VS NODELIST"},{"location":"aula06/#array-like","text":"HTMLCollection e NodeList s\u00e3o array-like, parecem uma array mas n\u00e3o s\u00e3o. O m\u00e9todo de Array forEach () por exemplo, existe apenas em NodeList. array-like 1 2 3 4 5 6 7 const gridSection = document . querySelectorAll ( '.grid-section' ); gridSection . forEach ( function ( gridItem , index , array ) { gridItem . classList . add ( 'azul' ); console . log ( index ) // index do item na array console . log ( array ) // a array completa }); \u00c9 poss\u00edvel transformar array-like em uma Array real Basta utilizar o m\u00e9todo Array . from ( gridSection ) \" Exerc\u00edcio Retorne no console todas as imagens de um site Selecione o primeiro h2 Selecione o \u00faltimo p do site Reposit\u00f3rio para os exerc\u00edcios: https://github.com/gleonel/TWAcode.git","title":"ARRAY-LIKE"},{"location":"aula06/#foreach","text":"Constantemente vamos selecionar uma lista de itens do dom. A melhor forma para interagirmos com os mesmos \u00e9 utilizando o m\u00e9todo forEach. foreach 1 2 3 4 5 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( function ( item ){ console . log ( item ); }); PAR\u00c2METROS DO FOREACH O primeiro par\u00e2metro \u00e9 o callback, ou seja, a fun\u00e7\u00e3o que ser\u00e1 ativada a cada item. Esse fun\u00e7\u00e3o pode receber tr\u00eas par\u00e2metros: valorAtual, index e array; foreach 1 2 3 4 5 6 7 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( function ( valorAtual , index , array ){ console . log ( item ); // o item atual no loop console . log ( index ); // o n\u00famero do index console . log ( array ); // a Array completa });","title":"FOREACH"},{"location":"aula06/#foreach-e-array","text":"forEach \u00e9 um m\u00e9todo de Array, alguns objetos array-like possuem este m\u00e9todo. Caso n\u00e3o possua, o ideal \u00e9 transform\u00e1-los em uma array. array-like 1 2 3 4 5 6 const titulos = document . getElementsByClassName ( 'titulo' ); const titulosArray = Array . from ( titulos ); titulosArray . forEach ( function ( item ){ console . log ( item ); });","title":"FOREACH E ARRAY"},{"location":"aula06/#arrow-function","text":"Sintaxe curta em rela\u00e7\u00e3o a function expression . Basta remover a palavra chave function e adicionar a fat arrow => ap\u00f3s os argumentos. arrow 1 2 3 4 5 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach (( item ) => { console . log ( item ); });","title":"ARROW FUNCTION"},{"location":"aula06/#parametros-e-parenteses","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const imgs = document . querySelectorAll ( 'img' ); // par\u00e2metro \u00fanico n\u00e3o precisa de par\u00eanteses imgs . forEach ( item => { console . log ( item ); }); // multiplos par\u00e2metros precisam de par\u00eanteses imgs . forEach (( item , index ) => { console . log ( item , index ); }); // sem par\u00e2metro precisa dos par\u00eanteses, mesmo vazio let i = 0 ; imgs . forEach (() => { console . log ( i ++ ); });","title":"PAR\u00c2METROS E PAR\u00caNTESES"},{"location":"aula06/#return","text":"\u00c9 poss\u00edvel omitir as chaves {} para uma fun\u00e7\u00e3o que retorna uma linha. => 1 2 3 4 5 6 7 8 9 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( item => console . log ( item ) // N\u00e3o \u00e9 permitido fechar a linha com ; ); imgs . forEach ( item => console . log ( item )); Exerc\u00edcio Mostre no console cada par\u00e1grado do site Mostre o texto dos par\u00e1grafos no console Como corrigir os erros abaixo: ex3 1 2 3 4 5 6 7 8 9 10 11 12 const imgs = document . querySelectorAll ( 'img' ); imgs . forEach ( item , index => { console . log ( item , index ); }); let i = 0 ; imgs . forEach ( => { console . log ( i ++ ); }); imgs . forEach (() => i ++ );","title":"RETURN"},{"location":"aula06/#classlist","text":"Retorna uma lista com as classes do elemento. Permite adicionar, remover e verificar se cont\u00e9m. classlist 1 2 3 4 5 6 7 8 9 10 const menu = document . querySelector ( '.menu' ); menu . className ; // string menu . classList ; // lista de classes menu . classList . add ( 'ativo' ); menu . classList . add ( 'ativo' , 'mobile' ); // duas classes menu . classList . remove ( 'ativo' ); menu . classList . toggle ( 'ativo' ); // adiciona/remove a classe menu . classList . contains ( 'ativo' ); // true ou false menu . classList . replace ( 'ativo' , 'inativo' );","title":"CLASSLIST"},{"location":"aula06/#attributes","text":"Retorna uma array-like com os atributos do elemento. attributes 1 2 3 4 const animais = document . querySelector ( '.animais' ); animais . attributes ; // retorna todos os atributos animais . attributes [ 0 ]; // retorna o primeiro atributo","title":"ATTRIBUTES"},{"location":"aula06/#getattribute-e-setattribute","text":"M\u00e9todos que retornam ou definem de acordo com o atributo selecionado get_set 1 2 3 4 5 6 7 8 const img = document . querySelector ( 'img' ); img . getAttribute ( 'src' ); // valor do src img . setAttribute ( 'alt' , 'Texto Alternativo' ); // muda o alt img . hasAttribute ( 'id' ); // true / false img . removeAttribute ( 'alt' ); // remove o alt img . hasAttributes (); // true / false se tem algum atributo","title":"GETATTRIBUTE E SETATTRIBUTE"},{"location":"aula06/#read-only-vs-writable","text":"Existem propriedades que n\u00e3o permitem a mudan\u00e7a de seus valores, essas s\u00e3o considerados Read Only, ou seja, apenas leitura. read only 1 2 3 4 5 6 7 const animais = document . querySelector ( '.animais' ); animais . className ; // string com o nome das classes animais . className = 'azul' ; // substitui completamente a string animais . className += ' vermelho' ; // adiciona vermelho \u00e0 string animais . attributes = 'class=\"ativo\"' ; // n\u00e3o funciona, read-only Exerc\u00edcio Adicione a classe ativo a todos os itens do menu Remove a classe ativo de todos os itens do menu e mantenha apenas no primeiro Verifique se as imagens possuem o atributo alt Modifique o href do link externo no menu","title":"READ ONLY VS WRITABLE"},{"location":"aula06/#addeventlistener","text":"Adiciona uma fun\u00e7\u00e3o ao elemento, esta chamada de callback , que ser\u00e1 ativada assim que certo evento ocorrer neste elemento. event 1 2 3 4 5 6 const img = document . querySelector ( 'img' ); // elemento.addEventListener(event, callback, options) img . addEventListener ( 'click' , function () { console . log ( 'Clicou' ); })","title":"ADDEVENTLISTENER"},{"location":"aula06/#callback","text":"Quando ir\u00e1 reutiliza-la \u00e9 boa pr\u00e1tica separar a fun\u00e7\u00e3o de callback do addEventListener, ou seja, declarar uma fun\u00e7\u00e3o ao inv\u00e9s de passar diretamente uma fun\u00e7\u00e3o an\u00f4nima callback 1 2 3 4 5 6 7 8 9 10 11 12 13 const img = document . querySelector ( 'img' ); function callback () { console . log ( 'Clicou' ); } img . addEventListener ( 'click' , callback ); // \ud83d\ude80 img . addEventListener ( 'click' , callback ()); // undefined img . addEventListener ( 'click' , function () { console . log ( 'Clicou' ); }) img . addEventListener ( 'click' , () => { console . log ( 'Clicou' ); })","title":"CALLBACK"},{"location":"aula06/#event","text":"O primeiro par\u00e2metro do callback \u00e9 referente ao evento que ocorreu. event 1 2 3 4 5 6 7 const img = document . querySelector ( 'img' ); function callback ( event ) { console . log ( event ); } img . addEventListener ( 'click' , callback ); Geralmente utilizam e como nome do par\u00e2metro","title":"EVENT"},{"location":"aula06/#propriedades-do-event","text":"title 1 2 3 4 5 6 7 8 9 10 11 const animaisLista = document . querySelector ( '.animais-lista' ); function executarCallback ( event ) { const currentTarget = event . currentTarget ; // this const target = event . target ; // onde o clique ocorreu const type = event . type ; // tipo de evento const path = event . path ; console . log ( currentTarget , target , type , path ); } animaisLista . addEventListener ( 'click' , executarCallback );","title":"PROPRIEDADES DO EVENT"},{"location":"aula06/#eventpreventdefault","text":"Previne o comportamento padr\u00e3o do evento no browser. No caso de um link externo, por exemplo, ir\u00e1 previnir que o link seja ativado. prevent default 1 2 3 4 5 6 7 8 const linkExterno = document . querySelector ( 'a[href^=\"http\"]' ); function clickNoLink ( event ) { event . preventDefault (); console . log ( event . currentTarget . href ); } linkExterno . addEventListener ( 'click' , clickNoLink );","title":"EVENT.PREVENTDEFAULT()"},{"location":"aula06/#this","text":"A palavra chave this \u00e9 uma palavra especial de JavaScript, que pode fazer refer\u00eancia a diferentes objetos dependendo do contexto. No caso de eventos, ela far\u00e1 refer\u00eancia ao elemento em que addEventListener foi adicionado. this 1 2 3 4 5 6 7 8 const img = document . querySelector ( 'img' ); function callback ( event ) { console . log ( this ); // retorna a imagem console . log ( this . getAttribute ( 'src' )); } img . addEventListener ( 'click' , callback );","title":"THIS"},{"location":"aula06/#diferentes-eventos","text":"Existem diversos eventos como click , scroll , resize , keydown , keyup , mouseenter e mais. Eventos podem ser adicionados a diferentes elementos, como o window e document tamb\u00e9m. events 1 2 3 4 5 6 7 8 9 10 11 const h1 = document . querySelector ( 'h1' ); function callback ( event ) { console . log ( event . type , event ); } h1 . addEventListener ( 'click' , callback ); h1 . addEventListener ( 'mouseenter' , callback ); window . addEventListener ( 'scroll' , callback ); window . addEventListener ( 'resize' , callback ); window . addEventListener ( 'keydown' , callback ); Eventos https://developer.mozilla.org/en-US/docs/Web/Events","title":"DIFERENTES EVENTOS"},{"location":"aula06/#keyboard","text":"Voc\u00ea pode adicionar atalhos para facilitar a navega\u00e7\u00e3o no seu site, atrav\u00e9s de eventos do keyboard . keyboard 1 2 3 4 5 6 7 8 function handleKeyboard ( event ) { if ( event . key === 'a' ) document . body . classList . toggle ( 'azul' ); else if ( event . key === 'v' ) document . body . classList . toggle ( 'vermelho' ); } window . addEventListener ( 'keydown' , handleKeyboard );","title":"KEYBOARD"},{"location":"aula06/#foreach-e-eventos","text":"O m\u00e9todo addEventListener \u00e9 adicionado \u00e0 um \u00fanico elemento, ent\u00e3o \u00e9 necess\u00e1rio um loop entre elementos de uma lista, para adicionarmos \u00e0 cada um deles. foeach 1 2 3 4 5 6 7 8 9 10 const imgs = document . querySelectorAll ( 'img' ); function imgSrc ( event ) { const src = event . currentTarget . getAttribute ( 'src' ); console . log ( src ); } imgs . forEach (( img ) => { img . addEventListener ( 'click' , imgSrc ); }); Exerc\u00edcio Quando o usu\u00e1rio clicar nos links internos do site, adicione a classe ativo ao item clicado e remova dos demais itens caso eles possuam a mesma. Previna o comportamento padr\u00e3o desses links Selecione todos os elementos do site come\u00e7ando a partir do body, ao clique mostre exatamente quais elementos est\u00e3o sendo clicados Utilizando o c\u00f3digo anterior, ao inv\u00e9s de mostrar no console, remova o elemento que est\u00e1 sendo clicado, o m\u00e9todo remove() remove um elemento","title":"FOREACH E EVENTOS"},{"location":"aula06/#outerhtml-innerhtml-e-innertext","text":"Propriedades que retornam uma string contendo o html ou texto. \u00c9 poss\u00edvel atribuir um novo valor para as mesmas element . innerText = 'Novo Texto' . text 1 2 3 4 5 6 7 8 const menu = document . querySelector ( '.menu' ); menu . outerHTML ; // todo o html do elemento menu . innerHTML ; // html interno menu . innerText ; // texto, sem tags menu . innerText = '<p>Texto</p>' ; // a tag vai como texto menu . innerHTML = '<p>Texto</p>' ; // a tag \u00e9 renderizada","title":"OUTERHTML, INNERHTML E INNERTEXT"},{"location":"aula06/#trasversing","text":"Como navegar pelo DOM, utilizando suas propriedades e m\u00e9todos. transversing 1 2 3 4 5 6 7 8 9 10 11 12 13 const lista = document . querySelector ( '.animais-lista' ); lista . parentElement ; // pai lista . parentElement . parentElement ; // pai do pai lista . previousElementSibling ; // elemento acima lista . nextElementSibling ; // elemento abaixo lista . children ; // HTMLCollection com os filhos lista . children [ 0 ]; // primeiro filho lista . children [ -- lista . children . length ]; // \u00faltimo filho lista . querySelectorAll ( 'li' ); // todas as LI's lista . querySelector ( 'li:last-child' ); // \u00faltimo filho","title":"TRASVERSING"},{"location":"aula06/#element-vs-node","text":"Element's represetam um elemento html, ou seja, uma tag. Node representa um n\u00f3, e pode ser um elemento (Element), texto, coment\u00e1rio, quebra de linha e mais. element 1 2 3 4 5 6 7 const lista = document . querySelector ( '.animais-lista' ); lista . previousElementSibling ; // elemento acima lista . previousSibling ; // node acima lista . firstChild ; // primeiro node child lista . childNodes ; // todos os node child","title":"ELEMENT VS NODE"},{"location":"aula06/#manipulando-elementos","text":"\u00c9 poss\u00edvel mover elementos no dom com m\u00e9todos de Node. elements 1 2 3 4 5 6 7 8 const lista = document . querySelector ( '.animais-lista' ); const contato = document . querySelector ( '.contato' ); const titulo = contato . querySelector ( '.titulo' ); contato . appendChild ( lista ); // move lista para o final de contato contato . insertBefore ( lista , titulo ); // insere a lista antes de titulo contato . removeChild ( titulo ); // remove titulo de contato contato . replaceChild ( lista , titulo ); // substitui titulo por lista","title":"MANIPULANDO ELEMENTOS"},{"location":"aula06/#novos-elementos","text":"Podemos criar novos elementos com o m\u00e9todo createElement () createElement 1 2 3 4 5 6 7 const animais = document . querySelector ( '.animais' ); const novoH1 = document . createElement ( 'h1' ); novoH1 . innerText = 'Novo T\u00edtulo' ; novoH1 . classList . add ( 'titulo' ); animais . appendChild ( novoH1 );","title":"NOVOS ELEMENTOS"},{"location":"aula06/#clonar-elementos","text":"Todo elemento selecionado \u00e9 \u00fanico. Para criarmos um novo elemento baseado no anterior, \u00e9 necess\u00e1rio utilizar o m\u00e9todo cloneNode () clone 1 2 3 4 5 6 7 8 const titulo = document . querySelector ( 'h1' ); const titulo2 = document . querySelector ( 'h1' ); const novoTitulo = titulo ; // titulo, titulo2 e novoTitulo s\u00e3o iguais const cloneTitulo = titulo . cloneNode ( true ); //true sinaliza para incluir os filhos const contato = document . querySelector ( '.contato' ); contato . appendChild ( cloneTitulo ); Exerc\u00edcio Duplique o menu e adicione ele em copy Selecione o primeiro DT da dl de Faq Selecione o DD referente ao primeiro DT Substitua o conte\u00fado html de .faq pelo de .animais","title":"CLONAR ELEMENTOS"},{"location":"aula07/","text":"MANIPULANDO FORMUL\u00c1RIOS Para criar um formul\u00e1rio em HTML, voc\u00ea usa o < form > form 1 2 < form action = \"/signup\" method = \"post\" id = \"signup\" > < /form> O elemento tem dois atributos importantes: action e method. O action especifica uma URL que processar\u00e1 o envio do formul\u00e1rio. Neste exemplo, a a\u00e7\u00e3o \u00e9 a /signupURL. O method especifica o m\u00e9todo HTTP com o qual enviar o formul\u00e1rio. Normalmente, o m\u00e9todo \u00e9 post ou get. JavaScript usa o HTMLFormElement para representar um formul\u00e1rio. O HTMLFormElement tem as seguintes propriedades que correspondem aos atributos HTML: action\u2013 \u00e9 a URL que processa os dados do formul\u00e1rio. method\u2013 \u00e9 o m\u00e9todo HTTP que \u00e9 equivalente ao method do elemento. O HTMLFormElement tamb\u00e9m fornece os seguintes m\u00e9todos \u00fateis: submit()\u2013 enviar o formul\u00e1rio. reset()\u2013 redefinir o formul\u00e1rio. Refer\u00eanciando o formul\u00e1rio Para fazer refer\u00eancia ao elemento, voc\u00ea pode usar m\u00e9todos de sele\u00e7\u00e3o do DOM, como getElementById(): getElement 1 const form = document . getElementById ( 'subscribe' ); Um documento HTML pode ter v\u00e1rios formul\u00e1rios. A propriedade document.forms retorna uma cole\u00e7\u00e3o de formul\u00e1rios ( HTMLFormControlsCollection) no documento: forms 1 2 3 document . forms ; document . forms [ 0 ]; Enviando um formul\u00e1rio Normalmente, um formul\u00e1rio tem um bot\u00e3o de envio. Quando voc\u00ea clica nele, o navegador envia os dados do formul\u00e1rio para o servidor. Para criar um bot\u00e3o de envio, voc\u00ea usa < input > ou < button > com o tipo submit: submit 1 2 3 4 5 < input type = \"submit\" value = \"Subscribe\" > //ou < button type = \"submit\" > Subscribe </ button > Quando voc\u00ea envia o formul\u00e1rio, o evento submit \u00e9 acionado antes que a solicita\u00e7\u00e3o seja enviada ao servidor. Isso lhe d\u00e1 a chance de validar os dados do formul\u00e1rio. Se os dados do formul\u00e1rio forem inv\u00e1lidos, voc\u00ea poder\u00e1 interromper o envio do formul\u00e1rio. Para anexar um ouvinte de evento ao submitevento, voc\u00ea usa o m\u00e9todo addEventListener() do elemento de formul\u00e1rio da seguinte forma: submit 1 2 3 4 5 const form = document . getElementById ( 'signup' ); form . addEventListener ( 'submit' , ( event ) => { // trabalha com os dados }); Para impedir que o formul\u00e1rio seja enviado, voc\u00ea chama o m\u00e9todo preventDefault() dentro do manipulador de eventos assim: prevent 1 2 3 4 form . addEventListener ( 'submit' , ( event ) => { // Cancela o envio event . preventDefault (); }); Para enviar o formul\u00e1rio em JavaScript, voc\u00ea chama o m\u00e9todo submit() do objeto de formul\u00e1rio: submit 1 form . submit (); Observe que o form.submit() n\u00e3o aciona o evento submit. Portanto, voc\u00ea deve sempre validar o formul\u00e1rio antes de chamar esse m\u00e9todo. Acessando campos do formul\u00e1rio Para acessar campos de formul\u00e1rio, voc\u00ea pode usar m\u00e9todos DOM como getElementsByName(), getElementById(), querySelector(), etc. Al\u00e9m disso, voc\u00ea pode usar a propriedade elements do objeto form. A propriedade form.elements armazena uma cole\u00e7\u00e3o de elementos do formul\u00e1rio. O JavaScript permite acessar um elemento por \u00edndice, id ou nome. Suponha que voc\u00ea tenha o seguinte formul\u00e1rio de inscri\u00e7\u00e3o com dois elementos: form 1 2 3 4 5 6 7 8 9 10 11 12 < form action = \"signup.html\" method = \"post\" id = \"signup\" > < h1 > Cadastro </ h1 > < div class = \"field\" > < label for = \"name\" > Nome: </ label > < input type = \"text\" id = \"name\" name = \"name\" placeholder = \"Nome completo\" /> </ div > < div class = \"field\" > < label for = \"email\" > Email: </ label > < input type = \"text\" id = \"email\" name = \"email\" placeholder = \"Insira seu e-mail\" /> </ div > < button type = \"submit\" > Cadastrar </ button > </ form > Para acessar os elementos do formul\u00e1rio, voc\u00ea obt\u00e9m primeiro o elemento do formul\u00e1rio: const form = document . getElementById ( 'signup' ); E use index, id ou name para acessar o elemento. acesso 1 2 3 4 5 6 7 8 9 10 11 // O c\u00f3digo a seguir acessa o primeiro elemento de formul\u00e1rio: form . elements [ 0 ]; // index form . elements [ 'name' ]; // name form . elements [ 'name' ]; // id (name & id s\u00e3o os mesmos neste caso) // Segundo elemento form . elements [ 1 ]; // index form . elements [ 'email' ]; // name form . elements [ 'email' ]; // id Ap\u00f3s acessar um campo de formul\u00e1rio, voc\u00ea pode utilizar a propriedade value para acessar seu valor, por exemplo: value 1 2 3 4 5 6 7 const form = document . getElementById ( 'signup' ); const name = form . elements [ 'name' ]; const email = form . elements [ 'email' ]; // pegando o valor let fullName = name . value ; let emailAddress = email . value ; Exerc\u00edcio Crie um formul\u00e1rio Crie um input text para item Crie um submit com o valor cadastrar Ao clicar em cadastrar no formul\u00e1rio o valor do item deve ser adicionado em um li abaixo do form Crie um link com o texto excluir na frente de cada item, ao clicar em excluir o item desaparece da tela","title":"T\u00f3pico 07"},{"location":"aula07/#manipulando-formularios","text":"Para criar um formul\u00e1rio em HTML, voc\u00ea usa o < form > form 1 2 < form action = \"/signup\" method = \"post\" id = \"signup\" > < /form> O elemento tem dois atributos importantes: action e method. O action especifica uma URL que processar\u00e1 o envio do formul\u00e1rio. Neste exemplo, a a\u00e7\u00e3o \u00e9 a /signupURL. O method especifica o m\u00e9todo HTTP com o qual enviar o formul\u00e1rio. Normalmente, o m\u00e9todo \u00e9 post ou get. JavaScript usa o HTMLFormElement para representar um formul\u00e1rio. O HTMLFormElement tem as seguintes propriedades que correspondem aos atributos HTML: action\u2013 \u00e9 a URL que processa os dados do formul\u00e1rio. method\u2013 \u00e9 o m\u00e9todo HTTP que \u00e9 equivalente ao method do elemento. O HTMLFormElement tamb\u00e9m fornece os seguintes m\u00e9todos \u00fateis: submit()\u2013 enviar o formul\u00e1rio. reset()\u2013 redefinir o formul\u00e1rio.","title":"MANIPULANDO FORMUL\u00c1RIOS"},{"location":"aula07/#referenciando-o-formulario","text":"Para fazer refer\u00eancia ao elemento, voc\u00ea pode usar m\u00e9todos de sele\u00e7\u00e3o do DOM, como getElementById(): getElement 1 const form = document . getElementById ( 'subscribe' ); Um documento HTML pode ter v\u00e1rios formul\u00e1rios. A propriedade document.forms retorna uma cole\u00e7\u00e3o de formul\u00e1rios ( HTMLFormControlsCollection) no documento: forms 1 2 3 document . forms ; document . forms [ 0 ];","title":"Refer\u00eanciando o formul\u00e1rio"},{"location":"aula07/#enviando-um-formulario","text":"Normalmente, um formul\u00e1rio tem um bot\u00e3o de envio. Quando voc\u00ea clica nele, o navegador envia os dados do formul\u00e1rio para o servidor. Para criar um bot\u00e3o de envio, voc\u00ea usa < input > ou < button > com o tipo submit: submit 1 2 3 4 5 < input type = \"submit\" value = \"Subscribe\" > //ou < button type = \"submit\" > Subscribe </ button > Quando voc\u00ea envia o formul\u00e1rio, o evento submit \u00e9 acionado antes que a solicita\u00e7\u00e3o seja enviada ao servidor. Isso lhe d\u00e1 a chance de validar os dados do formul\u00e1rio. Se os dados do formul\u00e1rio forem inv\u00e1lidos, voc\u00ea poder\u00e1 interromper o envio do formul\u00e1rio. Para anexar um ouvinte de evento ao submitevento, voc\u00ea usa o m\u00e9todo addEventListener() do elemento de formul\u00e1rio da seguinte forma: submit 1 2 3 4 5 const form = document . getElementById ( 'signup' ); form . addEventListener ( 'submit' , ( event ) => { // trabalha com os dados }); Para impedir que o formul\u00e1rio seja enviado, voc\u00ea chama o m\u00e9todo preventDefault() dentro do manipulador de eventos assim: prevent 1 2 3 4 form . addEventListener ( 'submit' , ( event ) => { // Cancela o envio event . preventDefault (); }); Para enviar o formul\u00e1rio em JavaScript, voc\u00ea chama o m\u00e9todo submit() do objeto de formul\u00e1rio: submit 1 form . submit (); Observe que o form.submit() n\u00e3o aciona o evento submit. Portanto, voc\u00ea deve sempre validar o formul\u00e1rio antes de chamar esse m\u00e9todo.","title":"Enviando um formul\u00e1rio"},{"location":"aula07/#acessando-campos-do-formulario","text":"Para acessar campos de formul\u00e1rio, voc\u00ea pode usar m\u00e9todos DOM como getElementsByName(), getElementById(), querySelector(), etc. Al\u00e9m disso, voc\u00ea pode usar a propriedade elements do objeto form. A propriedade form.elements armazena uma cole\u00e7\u00e3o de elementos do formul\u00e1rio. O JavaScript permite acessar um elemento por \u00edndice, id ou nome. Suponha que voc\u00ea tenha o seguinte formul\u00e1rio de inscri\u00e7\u00e3o com dois elementos: form 1 2 3 4 5 6 7 8 9 10 11 12 < form action = \"signup.html\" method = \"post\" id = \"signup\" > < h1 > Cadastro </ h1 > < div class = \"field\" > < label for = \"name\" > Nome: </ label > < input type = \"text\" id = \"name\" name = \"name\" placeholder = \"Nome completo\" /> </ div > < div class = \"field\" > < label for = \"email\" > Email: </ label > < input type = \"text\" id = \"email\" name = \"email\" placeholder = \"Insira seu e-mail\" /> </ div > < button type = \"submit\" > Cadastrar </ button > </ form > Para acessar os elementos do formul\u00e1rio, voc\u00ea obt\u00e9m primeiro o elemento do formul\u00e1rio: const form = document . getElementById ( 'signup' ); E use index, id ou name para acessar o elemento. acesso 1 2 3 4 5 6 7 8 9 10 11 // O c\u00f3digo a seguir acessa o primeiro elemento de formul\u00e1rio: form . elements [ 0 ]; // index form . elements [ 'name' ]; // name form . elements [ 'name' ]; // id (name & id s\u00e3o os mesmos neste caso) // Segundo elemento form . elements [ 1 ]; // index form . elements [ 'email' ]; // name form . elements [ 'email' ]; // id Ap\u00f3s acessar um campo de formul\u00e1rio, voc\u00ea pode utilizar a propriedade value para acessar seu valor, por exemplo: value 1 2 3 4 5 6 7 const form = document . getElementById ( 'signup' ); const name = form . elements [ 'name' ]; const email = form . elements [ 'email' ]; // pegando o valor let fullName = name . value ; let emailAddress = email . value ; Exerc\u00edcio Crie um formul\u00e1rio Crie um input text para item Crie um submit com o valor cadastrar Ao clicar em cadastrar no formul\u00e1rio o valor do item deve ser adicionado em um li abaixo do form Crie um link com o texto excluir na frente de cada item, ao clicar em excluir o item desaparece da tela","title":"Acessando campos do formul\u00e1rio"},{"location":"ementa/","text":"Ementa UNIDADE I Introdu\u00e7\u00e3o ao Javascript Conceitos b\u00e1sicos Operadores matem\u00e1ticos e l\u00f3gicos Controles especiais Coment\u00e1rios Janelas de alerta e consoles UNIDADE II Vari\u00e1veis, strings e matrizes Declara\u00e7\u00e3o de vari\u00e1veis Convertendo tipos de dados Manipulando strings Importando JavaScript Condicionais e Itera\u00e7\u00f5es UNIDADE III Fun\u00e7\u00f5es, Fun\u00e7\u00f5es An\u00f4nimas, Arrow Functions, Callbacks, Operadores Rest e Spread Arrays, Itera\u00e7\u00e3o em Arrays (filter, foreach) Escopo UNIDADE IV Introdu\u00e7\u00e3o ao DOM, Manipulando o DOM, Sele\u00e7\u00e3o de Elementos e Enviando o DOM para a fun\u00e7\u00e3o Eventos no HTML, Eventos a partir do Javascript e Manipula\u00e7\u00e3o de eventos UNIDADE V Classes e Atributos, Objetos, Constructor Function, Prototype Introdu\u00e7\u00e3o ao Javascript Moderno Desestrutura\u00e7\u00e3o de Objetos e Arrays UNIDADE VI JavaScript S\u00edncrono e Ass\u00edncrono Timeouts e intervalos, Promises, async/await, Then, Catch Consumindo dados via REST Introdu\u00e7\u00e3o \u00e0s ferramentas para trabalhar com JAVASCRIPT(NPM, ESLint, Webpack, Babel) :material-book-open-variant: Bibliografia b\u00e1sica TERUEL, Evandro C. HTML 5 \u2013 Guia Pr\u00e1tico . S\u00e3o Paulo: \u00c9rica, 2015. NEGRINO, Tom. Java Script para World Wide Web . 5\u00aa ed. Rio de Janeiro: Campus, 2001. MANZANO, Jos\u00e9 Augusto N.G.; TOLEDO, Suely A. Guia de Orienta\u00e7\u00e3o e Desenvolvimento de Sites - Html , Xhtml , Css e Javascript/Jscript . S\u00e3o Paulo: \u00c9rica, 2014. :material-book-open-variant: Bibliografia complementar DEITEL, Paul J.; DEITEL, Harvey M. Ajax Rich Internet Applications e Desenvolvimento Web para Programadores . S\u00e3o Paulo: Pearson, 2008. FLANAGAN, David. JavaScript: O Guia Definitivo .6\u00aa ed - Porto Alegre: Bookman, 2013. OLIVEIRA, Cl\u00e1udio L. V. JavaScript descomplicado: programa\u00e7\u00e3o para a Web IOT e dispositivos m\u00f3veis . S\u00e3o Paulo: \u00c9rica, 2020. MILETTO, Evandro Manara; BERTAGNOLLI, Silvia de Castro. Desenvolvimento de software II: introduc\u0327a\u0303o ao desenvolvimento web com HTML, CSS, JavaScript e PHP . Porto Alegre : Bookman, 2014. FLATSCHART, Fabio; BACHINI, Clecio. Open Web Platform . Rio de Janeiro : Brassport, 2013. MILETTO, Evandro Manara; NICOLAO, Mariano; OKUYAMA, Fabio Yoshimitsu. Desenvolvimento de software I:conceitos b\u00e1sicos . Porto Alegre : Bookman, 2014. HAROLD, Elliotte R. Refatorando HTML . Porto Alegre: Bookman, 2010","title":"Ementa"},{"location":"ementa/#ementa","text":"UNIDADE I Introdu\u00e7\u00e3o ao Javascript Conceitos b\u00e1sicos Operadores matem\u00e1ticos e l\u00f3gicos Controles especiais Coment\u00e1rios Janelas de alerta e consoles UNIDADE II Vari\u00e1veis, strings e matrizes Declara\u00e7\u00e3o de vari\u00e1veis Convertendo tipos de dados Manipulando strings Importando JavaScript Condicionais e Itera\u00e7\u00f5es UNIDADE III Fun\u00e7\u00f5es, Fun\u00e7\u00f5es An\u00f4nimas, Arrow Functions, Callbacks, Operadores Rest e Spread Arrays, Itera\u00e7\u00e3o em Arrays (filter, foreach) Escopo UNIDADE IV Introdu\u00e7\u00e3o ao DOM, Manipulando o DOM, Sele\u00e7\u00e3o de Elementos e Enviando o DOM para a fun\u00e7\u00e3o Eventos no HTML, Eventos a partir do Javascript e Manipula\u00e7\u00e3o de eventos UNIDADE V Classes e Atributos, Objetos, Constructor Function, Prototype Introdu\u00e7\u00e3o ao Javascript Moderno Desestrutura\u00e7\u00e3o de Objetos e Arrays UNIDADE VI JavaScript S\u00edncrono e Ass\u00edncrono Timeouts e intervalos, Promises, async/await, Then, Catch Consumindo dados via REST Introdu\u00e7\u00e3o \u00e0s ferramentas para trabalhar com JAVASCRIPT(NPM, ESLint, Webpack, Babel)","title":"Ementa"},{"location":"ementa/#material-book-open-variant-bibliografia-basica","text":"TERUEL, Evandro C. HTML 5 \u2013 Guia Pr\u00e1tico . S\u00e3o Paulo: \u00c9rica, 2015. NEGRINO, Tom. Java Script para World Wide Web . 5\u00aa ed. Rio de Janeiro: Campus, 2001. MANZANO, Jos\u00e9 Augusto N.G.; TOLEDO, Suely A. Guia de Orienta\u00e7\u00e3o e Desenvolvimento de Sites - Html , Xhtml , Css e Javascript/Jscript . S\u00e3o Paulo: \u00c9rica, 2014.","title":":material-book-open-variant: Bibliografia b\u00e1sica"},{"location":"ementa/#material-book-open-variant-bibliografia-complementar","text":"DEITEL, Paul J.; DEITEL, Harvey M. Ajax Rich Internet Applications e Desenvolvimento Web para Programadores . S\u00e3o Paulo: Pearson, 2008. FLANAGAN, David. JavaScript: O Guia Definitivo .6\u00aa ed - Porto Alegre: Bookman, 2013. OLIVEIRA, Cl\u00e1udio L. V. JavaScript descomplicado: programa\u00e7\u00e3o para a Web IOT e dispositivos m\u00f3veis . S\u00e3o Paulo: \u00c9rica, 2020. MILETTO, Evandro Manara; BERTAGNOLLI, Silvia de Castro. Desenvolvimento de software II: introduc\u0327a\u0303o ao desenvolvimento web com HTML, CSS, JavaScript e PHP . Porto Alegre : Bookman, 2014. FLATSCHART, Fabio; BACHINI, Clecio. Open Web Platform . Rio de Janeiro : Brassport, 2013. MILETTO, Evandro Manara; NICOLAO, Mariano; OKUYAMA, Fabio Yoshimitsu. Desenvolvimento de software I:conceitos b\u00e1sicos . Porto Alegre : Bookman, 2014. HAROLD, Elliotte R. Refatorando HTML . Porto Alegre: Bookman, 2010","title":":material-book-open-variant: Bibliografia complementar"},{"location":"examples/","text":"Apresenta\u00e7\u00e3o For full documentation visit mkdocs.org . Apresenta\u00e7\u00e3o A paragraph before the code block. bubble_sort.py 1 2 3 function myfunction ( txt ) { document . getElementById ( \"demo\" ). innerHTML = txt } Look ma, less line noise! The console . log () function is used to generate a sequence of numbers. A paragraph after the code block. mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Bash # Minimal makefile for Sphinx documentation # # You can set these variables from the command line, and also # from the environment for the first two. SPHINXOPTS ? = SPHINXBUILD ? = sphinx-build SOURCEDIR = source BUILDDIR = build # Put it first so that \"make\" without argument is like \"make help\". help: @ $( SPHINXBUILD ) -M help \" $( SOURCEDIR ) \" \" $( BUILDDIR ) \" $( SPHINXOPTS ) $( O ) .PHONY: help Makefile # Catch-all target: route all unknown targets to Sphinx using the new # \"make mode\" option. $(O) is meant as a shortcut for $(SPHINXOPTS). %: Makefile @ $( SPHINXBUILD ) -M $@ \" $( SOURCEDIR ) \" \" $( BUILDDIR ) \" $( SPHINXOPTS ) $( O ) Syntax highlighting Example import flask import flask_saml app = flask . Flask ( __name__ ) app . config . update ({ 'SECRET_KEY' : 'soverysecret' , 'SAML_METADATA_URL' : 'https://mymetadata.xml' , }) flask_saml . FlaskSAML ( app ) Sample layout ```bash \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 site \u251c\u2500\u2500 404.html \u251c\u2500\u2500 about \u2502 \u2514\u2500\u2500 search_index.json \u251c\u2500\u2500 sitemap.xml \u2514\u2500\u2500 sitemap.xml.gz Grids :material-clock-fast:{ .lg .middle } Set up in 5 minutes Install mkdocs-material with pip and get up and running in minutes :octicons-arrow-right-24: Getting started :fontawesome-brands-markdown:{ .lg .middle } It's just Markdown Focus on your content and generate a responsive and searchable static site :octicons-arrow-right-24: Reference :material-format-font:{ .lg .middle } Made to measure Change the colors, fonts, language, icons, logo and more with a few lines :octicons-arrow-right-24: Customization :material-scale-balance:{ .lg .middle } Open Source, MIT Material for MkDocs is licensed under MIT and available on [GitHub] :octicons-arrow-right-24: License :fontawesome-brands-html5: HTML for content and structure :fontawesome-brands-js: JavaScript for interactivity :fontawesome-brands-css3: CSS for text running out of boxes :fontawesome-brands-internet-explorer: Internet Explorer ... huh?","title":"Apresenta\u00e7\u00e3o"},{"location":"examples/#apresentacao","text":"For full documentation visit mkdocs.org .","title":"Apresenta\u00e7\u00e3o"},{"location":"examples/#apresentacao_1","text":"A paragraph before the code block. bubble_sort.py 1 2 3 function myfunction ( txt ) { document . getElementById ( \"demo\" ). innerHTML = txt } Look ma, less line noise! The console . log () function is used to generate a sequence of numbers. A paragraph after the code block. mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Apresenta\u00e7\u00e3o"},{"location":"examples/#bash","text":"# Minimal makefile for Sphinx documentation # # You can set these variables from the command line, and also # from the environment for the first two. SPHINXOPTS ? = SPHINXBUILD ? = sphinx-build SOURCEDIR = source BUILDDIR = build # Put it first so that \"make\" without argument is like \"make help\". help: @ $( SPHINXBUILD ) -M help \" $( SOURCEDIR ) \" \" $( BUILDDIR ) \" $( SPHINXOPTS ) $( O ) .PHONY: help Makefile # Catch-all target: route all unknown targets to Sphinx using the new # \"make mode\" option. $(O) is meant as a shortcut for $(SPHINXOPTS). %: Makefile @ $( SPHINXBUILD ) -M $@ \" $( SOURCEDIR ) \" \" $( BUILDDIR ) \" $( SPHINXOPTS ) $( O )","title":"Bash"},{"location":"examples/#syntax-highlighting-example","text":"import flask import flask_saml app = flask . Flask ( __name__ ) app . config . update ({ 'SECRET_KEY' : 'soverysecret' , 'SAML_METADATA_URL' : 'https://mymetadata.xml' , }) flask_saml . FlaskSAML ( app )","title":"Syntax highlighting Example"},{"location":"examples/#sample-layout","text":"```bash \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 site \u251c\u2500\u2500 404.html \u251c\u2500\u2500 about \u2502 \u2514\u2500\u2500 search_index.json \u251c\u2500\u2500 sitemap.xml \u2514\u2500\u2500 sitemap.xml.gz","title":"Sample layout"},{"location":"examples/#grids","text":":material-clock-fast:{ .lg .middle } Set up in 5 minutes Install mkdocs-material with pip and get up and running in minutes :octicons-arrow-right-24: Getting started :fontawesome-brands-markdown:{ .lg .middle } It's just Markdown Focus on your content and generate a responsive and searchable static site :octicons-arrow-right-24: Reference :material-format-font:{ .lg .middle } Made to measure Change the colors, fonts, language, icons, logo and more with a few lines :octicons-arrow-right-24: Customization :material-scale-balance:{ .lg .middle } Open Source, MIT Material for MkDocs is licensed under MIT and available on [GitHub] :octicons-arrow-right-24: License :fontawesome-brands-html5: HTML for content and structure :fontawesome-brands-js: JavaScript for interactivity :fontawesome-brands-css3: CSS for text running out of boxes :fontawesome-brands-internet-explorer: Internet Explorer ... huh?","title":"Grids"}]}